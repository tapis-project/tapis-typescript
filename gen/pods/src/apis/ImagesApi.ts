/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Pods Service
 *  The Pods Service is a web service and distributed computing platform providing pods-as-a-service (PaaS). The service  implements a message broker and processor model that requests pods, alongside a health module to poll for pod data, including logs, status, and health. The primary use of this service is to have quick to deploy long-lived services based on Docker images that are exposed via HTTP or TCP endpoints listed by the API.  **The Pods service provides functionality for two types of pod solutions:**  * **Templated Pods** for run-as-is popular images. Neo4J is one example, the template manages TCP ports, user creation, and permissions.  * **Custom Pods** for arbitrary docker images with less functionality. In this case we will expose port 5000 and do nothing else.   The live-docs act as the most up-to-date API reference. Visit the [documentation for more information](https://tapis.readthedocs.io/en/latest/technical/pods.html). 
 *
 * The version of the OpenAPI document: 1.8.4
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ImageDeleteResponse,
    ImageDeleteResponseFromJSON,
    ImageDeleteResponseToJSON,
    ImageResponse,
    ImageResponseFromJSON,
    ImageResponseToJSON,
    ImagesResponse,
    ImagesResponseFromJSON,
    ImagesResponseToJSON,
    NewImage,
    NewImageFromJSON,
    NewImageToJSON,
} from '../models';

export interface AddImageRequest {
    newImage: NewImage;
}

export interface AddImagesRequest {
    newImage: Array<NewImage>;
    skipDuplicates?: boolean;
}

export interface DeleteImageRequest {
    imageId: any;
}

export interface GetImageRequest {
    imageId: any;
}

/**
 * 
 */
export class ImagesApi extends runtime.BaseAPI {

    /**
     * Add a image with inputted information.  Returns new image object.
     * add_image
     */
    async addImageRaw(requestParameters: AddImageRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ImageResponse>> {
        if (requestParameters.newImage === null || requestParameters.newImage === undefined) {
            throw new runtime.RequiredError('newImage','Required parameter requestParameters.newImage was null or undefined when calling addImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/pods/images`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewImageToJSON(requestParameters.newImage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageResponseFromJSON(jsonValue));
    }

    /**
     * Add a image with inputted information.  Returns new image object.
     * add_image
     */
    async addImage(requestParameters: AddImageRequest, initOverrides?: RequestInit): Promise<ImageResponse> {
        const response = await this.addImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add multiple images with inputted information.  Returns new image objects.
     * add_images
     */
    async addImagesRaw(requestParameters: AddImagesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ImagesResponse>> {
        if (requestParameters.newImage === null || requestParameters.newImage === undefined) {
            throw new runtime.RequiredError('newImage','Required parameter requestParameters.newImage was null or undefined when calling addImages.');
        }

        const queryParameters: any = {};

        if (requestParameters.skipDuplicates !== undefined) {
            queryParameters['skip_duplicates'] = requestParameters.skipDuplicates;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/pods/images/bulk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.newImage.map(NewImageToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImagesResponseFromJSON(jsonValue));
    }

    /**
     * Add multiple images with inputted information.  Returns new image objects.
     * add_images
     */
    async addImages(requestParameters: AddImagesRequest, initOverrides?: RequestInit): Promise<ImagesResponse> {
        const response = await this.addImagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an image.  Returns \"\".
     * delete_image
     */
    async deleteImageRaw(requestParameters: DeleteImageRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ImageDeleteResponse>> {
        if (requestParameters.imageId === null || requestParameters.imageId === undefined) {
            throw new runtime.RequiredError('imageId','Required parameter requestParameters.imageId was null or undefined when calling deleteImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods/images/{image_id}`.replace(`{${"image_id"}}`, encodeURIComponent(String(requestParameters.imageId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageDeleteResponseFromJSON(jsonValue));
    }

    /**
     * Delete an image.  Returns \"\".
     * delete_image
     */
    async deleteImage(requestParameters: DeleteImageRequest, initOverrides?: RequestInit): Promise<ImageDeleteResponse> {
        const response = await this.deleteImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an image.  Returns retrieved image object.
     * get_image
     */
    async getImageRaw(requestParameters: GetImageRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ImageResponse>> {
        if (requestParameters.imageId === null || requestParameters.imageId === undefined) {
            throw new runtime.RequiredError('imageId','Required parameter requestParameters.imageId was null or undefined when calling getImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods/images/{image_id}`.replace(`{${"image_id"}}`, encodeURIComponent(String(requestParameters.imageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageResponseFromJSON(jsonValue));
    }

    /**
     * Get an image.  Returns retrieved image object.
     * get_image
     */
    async getImage(requestParameters: GetImageRequest, initOverrides?: RequestInit): Promise<ImageResponse> {
        const response = await this.getImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all images allowed globally + in respective tenant.  Returns a list of images.
     * get_images
     */
    async getImagesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<ImagesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods/images`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImagesResponseFromJSON(jsonValue));
    }

    /**
     * Get all images allowed globally + in respective tenant.  Returns a list of images.
     * get_images
     */
    async getImages(initOverrides?: RequestInit): Promise<ImagesResponse> {
        const response = await this.getImagesRaw(initOverrides);
        return await response.value();
    }

}
