/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Pods Service
 *  The Pods Service is a web service and distributed computing platform providing pods-as-a-service (PaaS). The service  implements a message broker and processor model that requests pods, alongside a health module to poll for pod data, including logs, status, and health. The primary use of this service is to have quick to deploy long-lived services based on Docker images that are exposed via HTTP or TCP endpoints listed by the API.  **The Pods service provides functionality for two types of pod solutions:**  * **Templated Pods** for run-as-is popular images. Neo4J is one example, the template manages TCP ports, user creation, and permissions.  * **Custom Pods** for arbitrary docker images with less functionality. In this case we will expose port 5000 and do nothing else.   The live-docs act as the most up-to-date API reference. Visit the [documentation for more information](https://tapis.readthedocs.io/en/latest/technical/pods.html). 
 *
 * The version of the OpenAPI document: 1.8.4
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PodPermissionsResponse,
    PodPermissionsResponseFromJSON,
    PodPermissionsResponseToJSON,
    SetPermission,
    SetPermissionFromJSON,
    SetPermissionToJSON,
    SnapshotPermissionsResponse,
    SnapshotPermissionsResponseFromJSON,
    SnapshotPermissionsResponseToJSON,
    TemplatePermissionsResponse,
    TemplatePermissionsResponseFromJSON,
    TemplatePermissionsResponseToJSON,
    VolumePermissionsResponse,
    VolumePermissionsResponseFromJSON,
    VolumePermissionsResponseToJSON,
} from '../models';

export interface DeletePodPermissionRequest {
    podId: any;
    user: any;
}

export interface DeleteSnapshotPermissionRequest {
    snapshotId: any;
    user: any;
}

export interface DeleteTemplatePermissionRequest {
    templateId: any;
    user: any;
}

export interface DeleteVolumePermissionRequest {
    volumeId: any;
    user: any;
}

export interface GetPodPermissionsRequest {
    podId: any;
}

export interface GetSnapshotPermissionsRequest {
    snapshotId: any;
}

export interface GetTemplatePermissionsRequest {
    templateId: any;
}

export interface GetVolumePermissionsRequest {
    volumeId: any;
}

export interface SetPodPermissionRequest {
    podId: any;
    setPermission: SetPermission;
}

export interface SetSnapshotPermissionRequest {
    snapshotId: any;
    setPermission: SetPermission;
}

export interface SetTemplatePermissionRequest {
    templateId: any;
    setPermission: SetPermission;
}

export interface SetVolumePermissionRequest {
    volumeId: any;
    setPermission: SetPermission;
}

/**
 * 
 */
export class PermissionsApi extends runtime.BaseAPI {

    /**
     * Delete a permission from a pod.  Returns updated pod permissions.
     * delete_pod_permission
     */
    async deletePodPermissionRaw(requestParameters: DeletePodPermissionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PodPermissionsResponse>> {
        if (requestParameters.podId === null || requestParameters.podId === undefined) {
            throw new runtime.RequiredError('podId','Required parameter requestParameters.podId was null or undefined when calling deletePodPermission.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling deletePodPermission.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods/{pod_id}/permissions/{user}`.replace(`{${"pod_id"}}`, encodeURIComponent(String(requestParameters.podId))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PodPermissionsResponseFromJSON(jsonValue));
    }

    /**
     * Delete a permission from a pod.  Returns updated pod permissions.
     * delete_pod_permission
     */
    async deletePodPermission(requestParameters: DeletePodPermissionRequest, initOverrides?: RequestInit): Promise<PodPermissionsResponse> {
        const response = await this.deletePodPermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a permission from a snapshot.  Returns updated snapshot permissions.
     * delete_snapshot_permission
     */
    async deleteSnapshotPermissionRaw(requestParameters: DeleteSnapshotPermissionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SnapshotPermissionsResponse>> {
        if (requestParameters.snapshotId === null || requestParameters.snapshotId === undefined) {
            throw new runtime.RequiredError('snapshotId','Required parameter requestParameters.snapshotId was null or undefined when calling deleteSnapshotPermission.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling deleteSnapshotPermission.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods/snapshots/{snapshot_id}/permissions/{user}`.replace(`{${"snapshot_id"}}`, encodeURIComponent(String(requestParameters.snapshotId))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SnapshotPermissionsResponseFromJSON(jsonValue));
    }

    /**
     * Delete a permission from a snapshot.  Returns updated snapshot permissions.
     * delete_snapshot_permission
     */
    async deleteSnapshotPermission(requestParameters: DeleteSnapshotPermissionRequest, initOverrides?: RequestInit): Promise<SnapshotPermissionsResponse> {
        const response = await this.deleteSnapshotPermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a permission from a template.  Returns updated template permissions.
     * delete_template_permission
     */
    async deleteTemplatePermissionRaw(requestParameters: DeleteTemplatePermissionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TemplatePermissionsResponse>> {
        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling deleteTemplatePermission.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling deleteTemplatePermission.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods/templates/{template_id}/permissions/{user}`.replace(`{${"template_id"}}`, encodeURIComponent(String(requestParameters.templateId))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatePermissionsResponseFromJSON(jsonValue));
    }

    /**
     * Delete a permission from a template.  Returns updated template permissions.
     * delete_template_permission
     */
    async deleteTemplatePermission(requestParameters: DeleteTemplatePermissionRequest, initOverrides?: RequestInit): Promise<TemplatePermissionsResponse> {
        const response = await this.deleteTemplatePermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a permission from a volume.  Returns updated volume permissions.
     * delete_volume_permission
     */
    async deleteVolumePermissionRaw(requestParameters: DeleteVolumePermissionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VolumePermissionsResponse>> {
        if (requestParameters.volumeId === null || requestParameters.volumeId === undefined) {
            throw new runtime.RequiredError('volumeId','Required parameter requestParameters.volumeId was null or undefined when calling deleteVolumePermission.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling deleteVolumePermission.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods/volumes/{volume_id}/permissions/{user}`.replace(`{${"volume_id"}}`, encodeURIComponent(String(requestParameters.volumeId))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VolumePermissionsResponseFromJSON(jsonValue));
    }

    /**
     * Delete a permission from a volume.  Returns updated volume permissions.
     * delete_volume_permission
     */
    async deleteVolumePermission(requestParameters: DeleteVolumePermissionRequest, initOverrides?: RequestInit): Promise<VolumePermissionsResponse> {
        const response = await this.deleteVolumePermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a pods permissions.  Note: - There are 3 levels of permissions, READ, USER, and ADMIN. - Permissions are granted/revoked to individual TACC usernames.  Returns all pod permissions.
     * get_pod_permissions
     */
    async getPodPermissionsRaw(requestParameters: GetPodPermissionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PodPermissionsResponse>> {
        if (requestParameters.podId === null || requestParameters.podId === undefined) {
            throw new runtime.RequiredError('podId','Required parameter requestParameters.podId was null or undefined when calling getPodPermissions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods/{pod_id}/permissions`.replace(`{${"pod_id"}}`, encodeURIComponent(String(requestParameters.podId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PodPermissionsResponseFromJSON(jsonValue));
    }

    /**
     * Get a pods permissions.  Note: - There are 3 levels of permissions, READ, USER, and ADMIN. - Permissions are granted/revoked to individual TACC usernames.  Returns all pod permissions.
     * get_pod_permissions
     */
    async getPodPermissions(requestParameters: GetPodPermissionsRequest, initOverrides?: RequestInit): Promise<PodPermissionsResponse> {
        const response = await this.getPodPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a snapshots permissions.  Note: - There are 3 levels of permissions, READ, USER, and ADMIN. - Permissions are granted/revoked to individual TACC usernames.  Returns all volue permissions.
     * get_snapshot_permissions
     */
    async getSnapshotPermissionsRaw(requestParameters: GetSnapshotPermissionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SnapshotPermissionsResponse>> {
        if (requestParameters.snapshotId === null || requestParameters.snapshotId === undefined) {
            throw new runtime.RequiredError('snapshotId','Required parameter requestParameters.snapshotId was null or undefined when calling getSnapshotPermissions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods/snapshots/{snapshot_id}/permissions`.replace(`{${"snapshot_id"}}`, encodeURIComponent(String(requestParameters.snapshotId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SnapshotPermissionsResponseFromJSON(jsonValue));
    }

    /**
     * Get a snapshots permissions.  Note: - There are 3 levels of permissions, READ, USER, and ADMIN. - Permissions are granted/revoked to individual TACC usernames.  Returns all volue permissions.
     * get_snapshot_permissions
     */
    async getSnapshotPermissions(requestParameters: GetSnapshotPermissionsRequest, initOverrides?: RequestInit): Promise<SnapshotPermissionsResponse> {
        const response = await this.getSnapshotPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a templates permissions.  Note: - There are 3 levels of permissions, READ, USER, and ADMIN. - Permissions are granted/revoked to individual TACC usernames. - Permissions can be set for TENANT or SITE keys for tenant-level or site-level sharing.  Returns all template permissions.
     * get_template_permissions
     */
    async getTemplatePermissionsRaw(requestParameters: GetTemplatePermissionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TemplatePermissionsResponse>> {
        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling getTemplatePermissions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods/templates/{template_id}/permissions`.replace(`{${"template_id"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatePermissionsResponseFromJSON(jsonValue));
    }

    /**
     * Get a templates permissions.  Note: - There are 3 levels of permissions, READ, USER, and ADMIN. - Permissions are granted/revoked to individual TACC usernames. - Permissions can be set for TENANT or SITE keys for tenant-level or site-level sharing.  Returns all template permissions.
     * get_template_permissions
     */
    async getTemplatePermissions(requestParameters: GetTemplatePermissionsRequest, initOverrides?: RequestInit): Promise<TemplatePermissionsResponse> {
        const response = await this.getTemplatePermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a volumes permissions.  Note: - There are 3 levels of permissions, READ, USER, and ADMIN. - Permissions are granted/revoked to individual TACC usernames.  Returns all volue permissions.
     * get_volume_permissions
     */
    async getVolumePermissionsRaw(requestParameters: GetVolumePermissionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VolumePermissionsResponse>> {
        if (requestParameters.volumeId === null || requestParameters.volumeId === undefined) {
            throw new runtime.RequiredError('volumeId','Required parameter requestParameters.volumeId was null or undefined when calling getVolumePermissions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods/volumes/{volume_id}/permissions`.replace(`{${"volume_id"}}`, encodeURIComponent(String(requestParameters.volumeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VolumePermissionsResponseFromJSON(jsonValue));
    }

    /**
     * Get a volumes permissions.  Note: - There are 3 levels of permissions, READ, USER, and ADMIN. - Permissions are granted/revoked to individual TACC usernames.  Returns all volue permissions.
     * get_volume_permissions
     */
    async getVolumePermissions(requestParameters: GetVolumePermissionsRequest, initOverrides?: RequestInit): Promise<VolumePermissionsResponse> {
        const response = await this.getVolumePermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set a permission for a pod.  Returns updated pod permissions.
     * set_pod_permission
     */
    async setPodPermissionRaw(requestParameters: SetPodPermissionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PodPermissionsResponse>> {
        if (requestParameters.podId === null || requestParameters.podId === undefined) {
            throw new runtime.RequiredError('podId','Required parameter requestParameters.podId was null or undefined when calling setPodPermission.');
        }

        if (requestParameters.setPermission === null || requestParameters.setPermission === undefined) {
            throw new runtime.RequiredError('setPermission','Required parameter requestParameters.setPermission was null or undefined when calling setPodPermission.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/pods/{pod_id}/permissions`.replace(`{${"pod_id"}}`, encodeURIComponent(String(requestParameters.podId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetPermissionToJSON(requestParameters.setPermission),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PodPermissionsResponseFromJSON(jsonValue));
    }

    /**
     * Set a permission for a pod.  Returns updated pod permissions.
     * set_pod_permission
     */
    async setPodPermission(requestParameters: SetPodPermissionRequest, initOverrides?: RequestInit): Promise<PodPermissionsResponse> {
        const response = await this.setPodPermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set a permission for a snapshot.  Returns updated snapshot permissions.
     * set_snapshot_permission
     */
    async setSnapshotPermissionRaw(requestParameters: SetSnapshotPermissionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SnapshotPermissionsResponse>> {
        if (requestParameters.snapshotId === null || requestParameters.snapshotId === undefined) {
            throw new runtime.RequiredError('snapshotId','Required parameter requestParameters.snapshotId was null or undefined when calling setSnapshotPermission.');
        }

        if (requestParameters.setPermission === null || requestParameters.setPermission === undefined) {
            throw new runtime.RequiredError('setPermission','Required parameter requestParameters.setPermission was null or undefined when calling setSnapshotPermission.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/pods/snapshots/{snapshot_id}/permissions`.replace(`{${"snapshot_id"}}`, encodeURIComponent(String(requestParameters.snapshotId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetPermissionToJSON(requestParameters.setPermission),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SnapshotPermissionsResponseFromJSON(jsonValue));
    }

    /**
     * Set a permission for a snapshot.  Returns updated snapshot permissions.
     * set_snapshot_permission
     */
    async setSnapshotPermission(requestParameters: SetSnapshotPermissionRequest, initOverrides?: RequestInit): Promise<SnapshotPermissionsResponse> {
        const response = await this.setSnapshotPermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set a permission for a template.  Returns updated template permissions.
     * set_template_permission
     */
    async setTemplatePermissionRaw(requestParameters: SetTemplatePermissionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TemplatePermissionsResponse>> {
        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling setTemplatePermission.');
        }

        if (requestParameters.setPermission === null || requestParameters.setPermission === undefined) {
            throw new runtime.RequiredError('setPermission','Required parameter requestParameters.setPermission was null or undefined when calling setTemplatePermission.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/pods/templates/{template_id}/permissions`.replace(`{${"template_id"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetPermissionToJSON(requestParameters.setPermission),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatePermissionsResponseFromJSON(jsonValue));
    }

    /**
     * Set a permission for a template.  Returns updated template permissions.
     * set_template_permission
     */
    async setTemplatePermission(requestParameters: SetTemplatePermissionRequest, initOverrides?: RequestInit): Promise<TemplatePermissionsResponse> {
        const response = await this.setTemplatePermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set a permission for a volume.  Returns updated volume permissions.
     * set_volume_permission
     */
    async setVolumePermissionRaw(requestParameters: SetVolumePermissionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VolumePermissionsResponse>> {
        if (requestParameters.volumeId === null || requestParameters.volumeId === undefined) {
            throw new runtime.RequiredError('volumeId','Required parameter requestParameters.volumeId was null or undefined when calling setVolumePermission.');
        }

        if (requestParameters.setPermission === null || requestParameters.setPermission === undefined) {
            throw new runtime.RequiredError('setPermission','Required parameter requestParameters.setPermission was null or undefined when calling setVolumePermission.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/pods/volumes/{volume_id}/permissions`.replace(`{${"volume_id"}}`, encodeURIComponent(String(requestParameters.volumeId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetPermissionToJSON(requestParameters.setPermission),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VolumePermissionsResponseFromJSON(jsonValue));
    }

    /**
     * Set a permission for a volume.  Returns updated volume permissions.
     * set_volume_permission
     */
    async setVolumePermission(requestParameters: SetVolumePermissionRequest, initOverrides?: RequestInit): Promise<VolumePermissionsResponse> {
        const response = await this.setVolumePermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
