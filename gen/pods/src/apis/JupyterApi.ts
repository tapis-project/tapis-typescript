/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Pods Service
 *  The Pods Service is a web service and distributed computing platform providing pods-as-a-service (PaaS). The service  implements a message broker and processor model that requests pods, alongside a health module to poll for pod data, including logs, status, and health. The primary use of this service is to have quick to deploy long-lived services based on Docker images that are exposed via HTTP or TCP endpoints listed by the API.  **The Pods service provides functionality for two types of pod solutions:**  * **Templated Pods** for run-as-is popular images. Neo4J is one example, the template manages TCP ports, user creation, and permissions.  * **Custom Pods** for arbitrary docker images with less functionality. In this case we will expose port 5000 and do nothing else.   The live-docs act as the most up-to-date API reference. Visit the [documentation for more information](https://tapis.readthedocs.io/en/latest/technical/pods.html). 
 *
 * The version of the OpenAPI document: 1.8.4
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models';

export interface UploadToJupyterRequest {
    podId: string;
    file: Blob;
    path: string;
}

/**
 * 
 */
export class JupyterApi extends runtime.BaseAPI {

    /**
     * Ensure the current user has a running Jupyter pod. If not, create a new one named \'{username}jupyter\' from the base Jupyter template. Returns pod name and URL.
     * Ensure user has a running Jupyter pod, useful for starting up coding environment
     */
    async ensureJupyterPodRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods/jupyter/ensure`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Ensure the current user has a running Jupyter pod. If not, create a new one named \'{username}jupyter\' from the base Jupyter template. Returns pod name and URL.
     * Ensure user has a running Jupyter pod, useful for starting up coding environment
     */
    async ensureJupyterPod(initOverrides?: RequestInit): Promise<any> {
        const response = await this.ensureJupyterPodRaw(initOverrides);
        return await response.value();
    }

    /**
     * Upload a document to the user\'s running Jupyter pod using the Jupyter API. Input: multipart form (file), and \'path\' (destination in Jupyter).
     * Upload a document to the user\'s Jupyter pod
     */
    async uploadToJupyterRaw(requestParameters: UploadToJupyterRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.podId === null || requestParameters.podId === undefined) {
            throw new runtime.RequiredError('podId','Required parameter requestParameters.podId was null or undefined when calling uploadToJupyter.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling uploadToJupyter.');
        }

        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling uploadToJupyter.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        if (requestParameters.path !== undefined) {
            formParams.append('path', requestParameters.path as any);
        }

        const response = await this.request({
            path: `/v3/pods/jupyter/{pod_id}/upload`.replace(`{${"pod_id"}}`, encodeURIComponent(String(requestParameters.podId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Upload a document to the user\'s running Jupyter pod using the Jupyter API. Input: multipart form (file), and \'path\' (destination in Jupyter).
     * Upload a document to the user\'s Jupyter pod
     */
    async uploadToJupyter(requestParameters: UploadToJupyterRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.uploadToJupyterRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
