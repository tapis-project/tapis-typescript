/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Pods Service
 *  The Pods Service is a web service and distributed computing platform providing pods-as-a-service (PaaS). The service  implements a message broker and processor model that requests pods, alongside a health module to poll for pod data, including logs, status, and health. The primary use of this service is to have quick to deploy long-lived services based on Docker images that are exposed via HTTP or TCP endpoints listed by the API.  **The Pods service provides functionality for two types of pod solutions:**  * **Templated Pods** for run-as-is popular images. Neo4J is one example, the template manages TCP ports, user creation, and permissions.  * **Custom Pods** for arbitrary docker images with less functionality. In this case we will expose port 5000 and do nothing else.   The live-docs act as the most up-to-date API reference. Visit the [documentation for more information](https://tapis.readthedocs.io/en/latest/technical/pods.html). 
 *
 * The version of the OpenAPI document: 1.8.4
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models';

export interface ErrorHandlerRequest {
    status: any;
}

/**
 * 
 */
export class MiscApi extends runtime.BaseAPI {

    /**
     * Handles all error codes from Traefik.
     * error_handler
     */
    async errorHandlerRaw(requestParameters: ErrorHandlerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.status === null || requestParameters.status === undefined) {
            throw new runtime.RequiredError('status','Required parameter requestParameters.status was null or undefined when calling errorHandler.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/error-handler/{status}`.replace(`{${"status"}}`, encodeURIComponent(String(requestParameters.status))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Handles all error codes from Traefik.
     * error_handler
     */
    async errorHandler(requestParameters: ErrorHandlerRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.errorHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Health check for service. Returns healthy when api is running. Should add database health check, should add kubernetes health check
     * healthcheck
     */
    async healthcheckRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/healthcheck`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Health check for service. Returns healthy when api is running. Should add database health check, should add kubernetes health check
     * healthcheck
     */
    async healthcheck(initOverrides?: RequestInit): Promise<any> {
        const response = await this.healthcheckRaw(initOverrides);
        return await response.value();
    }

    /**
     * Supplies traefik-config to service. Returns json traefik-config object for traefik to use with the http provider. Dynamic configs don\'t work well in  Kubernetes.
     * traefik_config
     */
    async traefikConfigRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/traefik-config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Supplies traefik-config to service. Returns json traefik-config object for traefik to use with the http provider. Dynamic configs don\'t work well in  Kubernetes.
     * traefik_config
     */
    async traefikConfig(initOverrides?: RequestInit): Promise<any> {
        const response = await this.traefikConfigRaw(initOverrides);
        return await response.value();
    }

}
