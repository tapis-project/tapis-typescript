/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Pods Service
 *  The Pods Service is a web service and distributed computing platform providing pods-as-a-service (PaaS). The service  implements a message broker and processor model that requests pods, alongside a health module to poll for pod data, including logs, status, and health. The primary use of this service is to have quick to deploy long-lived services based on Docker images that are exposed via HTTP or TCP endpoints listed by the API.  **The Pods service provides functionality for two types of pod solutions:**  * **Templated Pods** for run-as-is popular images. Neo4J is one example, the template manages TCP ports, user creation, and permissions.  * **Custom Pods** for arbitrary docker images with less functionality. In this case we will expose port 5000 and do nothing else.   The live-docs act as the most up-to-date API reference. Visit the [documentation for more information](https://tapis.readthedocs.io/en/latest/technical/pods.html). 
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    NewPod,
    NewPodFromJSON,
    NewPodToJSON,
    PodDeleteResponse,
    PodDeleteResponseFromJSON,
    PodDeleteResponseToJSON,
    PodResponse,
    PodResponseFromJSON,
    PodResponseToJSON,
    PodsResponse,
    PodsResponseFromJSON,
    PodsResponseToJSON,
    UpdatePod,
    UpdatePodFromJSON,
    UpdatePodToJSON,
} from '../models';

export interface CreatePodRequest {
    newPod: NewPod;
}

export interface DeletePodRequest {
    podId: any;
}

export interface GetDerivedPodRequest {
    podId: any;
}

export interface GetPodRequest {
    podId: any;
}

export interface RestartPodRequest {
    podId: any;
}

export interface StartPodRequest {
    podId: any;
}

export interface StopPodRequest {
    podId: any;
}

export interface UpdatePodRequest {
    podId: any;
    updatePod: UpdatePod;
}

/**
 * 
 */
export class PodsApi extends runtime.BaseAPI {

    /**
     * Create a pod with inputted information.  Notes: - Author will be given ADMIN level permissions to the pod. - status_requested defaults to \"ON\". So pod will immediately begin creation.  Returns new pod object.
     * create_pod
     */
    async createPodRaw(requestParameters: CreatePodRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PodResponse>> {
        if (requestParameters.newPod === null || requestParameters.newPod === undefined) {
            throw new runtime.RequiredError('newPod','Required parameter requestParameters.newPod was null or undefined when calling createPod.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/pods`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewPodToJSON(requestParameters.newPod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PodResponseFromJSON(jsonValue));
    }

    /**
     * Create a pod with inputted information.  Notes: - Author will be given ADMIN level permissions to the pod. - status_requested defaults to \"ON\". So pod will immediately begin creation.  Returns new pod object.
     * create_pod
     */
    async createPod(requestParameters: CreatePodRequest, initOverrides?: RequestInit): Promise<PodResponse> {
        const response = await this.createPodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a pod.  Returns \"\".
     * delete_pod
     */
    async deletePodRaw(requestParameters: DeletePodRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PodDeleteResponse>> {
        if (requestParameters.podId === null || requestParameters.podId === undefined) {
            throw new runtime.RequiredError('podId','Required parameter requestParameters.podId was null or undefined when calling deletePod.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods/{pod_id}`.replace(`{${"pod_id"}}`, encodeURIComponent(String(requestParameters.podId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PodDeleteResponseFromJSON(jsonValue));
    }

    /**
     * Delete a pod.  Returns \"\".
     * delete_pod
     */
    async deletePod(requestParameters: DeletePodRequest, initOverrides?: RequestInit): Promise<PodDeleteResponse> {
        const response = await this.deletePodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Derive a pod\'s final definition if templates are used.  Returns final pod definition to be used for pod creation.
     * get_derived_pod
     */
    async getDerivedPodRaw(requestParameters: GetDerivedPodRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PodResponse>> {
        if (requestParameters.podId === null || requestParameters.podId === undefined) {
            throw new runtime.RequiredError('podId','Required parameter requestParameters.podId was null or undefined when calling getDerivedPod.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods/{pod_id}/derived`.replace(`{${"pod_id"}}`, encodeURIComponent(String(requestParameters.podId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PodResponseFromJSON(jsonValue));
    }

    /**
     * Derive a pod\'s final definition if templates are used.  Returns final pod definition to be used for pod creation.
     * get_derived_pod
     */
    async getDerivedPod(requestParameters: GetDerivedPodRequest, initOverrides?: RequestInit): Promise<PodResponse> {
        const response = await this.getDerivedPodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a pod.  Returns retrieved pod object.
     * get_pod
     */
    async getPodRaw(requestParameters: GetPodRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PodResponse>> {
        if (requestParameters.podId === null || requestParameters.podId === undefined) {
            throw new runtime.RequiredError('podId','Required parameter requestParameters.podId was null or undefined when calling getPod.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods/{pod_id}`.replace(`{${"pod_id"}}`, encodeURIComponent(String(requestParameters.podId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PodResponseFromJSON(jsonValue));
    }

    /**
     * Get a pod.  Returns retrieved pod object.
     * get_pod
     */
    async getPod(requestParameters: GetPodRequest, initOverrides?: RequestInit): Promise<PodResponse> {
        const response = await this.getPodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all pods in your respective tenant and site that you have READ or higher access to.  Returns a list of pods.
     * list_pods
     */
    async listPodsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<PodsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PodsResponseFromJSON(jsonValue));
    }

    /**
     * Get all pods in your respective tenant and site that you have READ or higher access to.  Returns a list of pods.
     * list_pods
     */
    async listPods(initOverrides?: RequestInit): Promise<PodsResponse> {
        const response = await this.listPodsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Restart a pod.  Note: - Sets status_requested to RESTART. If pod status gets to STOPPED, status_requested will be flipped to ON. Health should then create new pod.  Returns updated pod object.
     * restart_pod
     */
    async restartPodRaw(requestParameters: RestartPodRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PodResponse>> {
        if (requestParameters.podId === null || requestParameters.podId === undefined) {
            throw new runtime.RequiredError('podId','Required parameter requestParameters.podId was null or undefined when calling restartPod.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods/{pod_id}/restart`.replace(`{${"pod_id"}}`, encodeURIComponent(String(requestParameters.podId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PodResponseFromJSON(jsonValue));
    }

    /**
     * Restart a pod.  Note: - Sets status_requested to RESTART. If pod status gets to STOPPED, status_requested will be flipped to ON. Health should then create new pod.  Returns updated pod object.
     * restart_pod
     */
    async restartPod(requestParameters: RestartPodRequest, initOverrides?: RequestInit): Promise<PodResponse> {
        const response = await this.restartPodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start a pod.  Note: - Sets status_requested to ON. Pod will attempt to deploy.  Returns updated pod object.
     * start_pod
     */
    async startPodRaw(requestParameters: StartPodRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PodResponse>> {
        if (requestParameters.podId === null || requestParameters.podId === undefined) {
            throw new runtime.RequiredError('podId','Required parameter requestParameters.podId was null or undefined when calling startPod.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods/{pod_id}/start`.replace(`{${"pod_id"}}`, encodeURIComponent(String(requestParameters.podId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PodResponseFromJSON(jsonValue));
    }

    /**
     * Start a pod.  Note: - Sets status_requested to ON. Pod will attempt to deploy.  Returns updated pod object.
     * start_pod
     */
    async startPod(requestParameters: StartPodRequest, initOverrides?: RequestInit): Promise<PodResponse> {
        const response = await this.startPodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stop a pod.  Note: - Sets status_requested to OFF. Pod will attempt to get to STOPPED status unless start_pod is ran.  Returns updated pod object.
     * stop_pod
     */
    async stopPodRaw(requestParameters: StopPodRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PodResponse>> {
        if (requestParameters.podId === null || requestParameters.podId === undefined) {
            throw new runtime.RequiredError('podId','Required parameter requestParameters.podId was null or undefined when calling stopPod.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods/{pod_id}/stop`.replace(`{${"pod_id"}}`, encodeURIComponent(String(requestParameters.podId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PodResponseFromJSON(jsonValue));
    }

    /**
     * Stop a pod.  Note: - Sets status_requested to OFF. Pod will attempt to get to STOPPED status unless start_pod is ran.  Returns updated pod object.
     * stop_pod
     */
    async stopPod(requestParameters: StopPodRequest, initOverrides?: RequestInit): Promise<PodResponse> {
        const response = await this.stopPodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a pod.  Note: - Pod will not be restarted, you must restart the pod for any pod-related changes to proliferate.  Returns updated pod object.
     * update_pod
     */
    async updatePodRaw(requestParameters: UpdatePodRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PodResponse>> {
        if (requestParameters.podId === null || requestParameters.podId === undefined) {
            throw new runtime.RequiredError('podId','Required parameter requestParameters.podId was null or undefined when calling updatePod.');
        }

        if (requestParameters.updatePod === null || requestParameters.updatePod === undefined) {
            throw new runtime.RequiredError('updatePod','Required parameter requestParameters.updatePod was null or undefined when calling updatePod.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/pods/{pod_id}`.replace(`{${"pod_id"}}`, encodeURIComponent(String(requestParameters.podId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePodToJSON(requestParameters.updatePod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PodResponseFromJSON(jsonValue));
    }

    /**
     * Update a pod.  Note: - Pod will not be restarted, you must restart the pod for any pod-related changes to proliferate.  Returns updated pod object.
     * update_pod
     */
    async updatePod(requestParameters: UpdatePodRequest, initOverrides?: RequestInit): Promise<PodResponse> {
        const response = await this.updatePodRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
