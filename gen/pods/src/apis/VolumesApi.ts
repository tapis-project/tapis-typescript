/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Pods Service
 *  The Pods Service is a web service and distributed computing platform providing pods-as-a-service (PaaS). The service  implements a message broker and processor model that requests pods, alongside a health module to poll for pod data, including logs, status, and health. The primary use of this service is to have quick to deploy long-lived services based on Docker images that are exposed via HTTP or TCP endpoints listed by the API.  **The Pods service provides functionality for two types of pod solutions:**  * **Templated Pods** for run-as-is popular images. Neo4J is one example, the template manages TCP ports, user creation, and permissions.  * **Custom Pods** for arbitrary docker images with less functionality. In this case we will expose port 5000 and do nothing else.   The live-docs act as the most up-to-date API reference. Visit the [documentation for more information](https://tapis.readthedocs.io/en/latest/technical/pods.html). 
 *
 * The version of the OpenAPI document: 1.8.4
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DeleteVolumeResponse,
    DeleteVolumeResponseFromJSON,
    DeleteVolumeResponseToJSON,
    FilesListResponse,
    FilesListResponseFromJSON,
    FilesListResponseToJSON,
    FilesUploadResponse,
    FilesUploadResponseFromJSON,
    FilesUploadResponseToJSON,
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    NewVolume,
    NewVolumeFromJSON,
    NewVolumeToJSON,
    UpdateVolume,
    UpdateVolumeFromJSON,
    UpdateVolumeToJSON,
    VolumeResponse,
    VolumeResponseFromJSON,
    VolumeResponseToJSON,
    VolumesResponse,
    VolumesResponseFromJSON,
    VolumesResponseToJSON,
} from '../models';

export interface CreateVolumeRequest {
    newVolume: NewVolume;
}

export interface DeleteVolumeRequest {
    volumeId: any;
}

export interface GetVolumeRequest {
    volumeId: any;
}

export interface GetVolumeContentsRequest {
    volumeId: string;
    path: string;
    zip?: boolean;
}

export interface ListVolumeFilesRequest {
    volumeId: any;
}

export interface UpdateVolumeRequest {
    volumeId: any;
    updateVolume: UpdateVolume;
}

export interface UploadToVolumeRequest {
    volumeId: string;
    path: string;
    file: Blob;
}

/**
 * 
 */
export class VolumesApi extends runtime.BaseAPI {

    /**
     * Create a volume with inputted information.  Notes: - Author will be given ADMIN level permissions to the volume. - status_requested defaults to \"ON\". So volume will immediately begin creation.  Returns new volume object.
     * create_volume
     */
    async createVolumeRaw(requestParameters: CreateVolumeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VolumeResponse>> {
        if (requestParameters.newVolume === null || requestParameters.newVolume === undefined) {
            throw new runtime.RequiredError('newVolume','Required parameter requestParameters.newVolume was null or undefined when calling createVolume.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/pods/volumes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewVolumeToJSON(requestParameters.newVolume),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VolumeResponseFromJSON(jsonValue));
    }

    /**
     * Create a volume with inputted information.  Notes: - Author will be given ADMIN level permissions to the volume. - status_requested defaults to \"ON\". So volume will immediately begin creation.  Returns new volume object.
     * create_volume
     */
    async createVolume(requestParameters: CreateVolumeRequest, initOverrides?: RequestInit): Promise<VolumeResponse> {
        const response = await this.createVolumeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a volume.  Returns \"\".
     * delete_volume
     */
    async deleteVolumeRaw(requestParameters: DeleteVolumeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteVolumeResponse>> {
        if (requestParameters.volumeId === null || requestParameters.volumeId === undefined) {
            throw new runtime.RequiredError('volumeId','Required parameter requestParameters.volumeId was null or undefined when calling deleteVolume.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods/volumes/{volume_id}`.replace(`{${"volume_id"}}`, encodeURIComponent(String(requestParameters.volumeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteVolumeResponseFromJSON(jsonValue));
    }

    /**
     * Delete a volume.  Returns \"\".
     * delete_volume
     */
    async deleteVolume(requestParameters: DeleteVolumeRequest, initOverrides?: RequestInit): Promise<DeleteVolumeResponse> {
        const response = await this.deleteVolumeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a volume.  Returns retrieved volume object.
     * get_volume
     */
    async getVolumeRaw(requestParameters: GetVolumeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VolumeResponse>> {
        if (requestParameters.volumeId === null || requestParameters.volumeId === undefined) {
            throw new runtime.RequiredError('volumeId','Required parameter requestParameters.volumeId was null or undefined when calling getVolume.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods/volumes/{volume_id}`.replace(`{${"volume_id"}}`, encodeURIComponent(String(requestParameters.volumeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VolumeResponseFromJSON(jsonValue));
    }

    /**
     * Get a volume.  Returns retrieved volume object.
     * get_volume
     */
    async getVolume(requestParameters: GetVolumeRequest, initOverrides?: RequestInit): Promise<VolumeResponse> {
        const response = await this.getVolumeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get file or directory contents as a stream of data from a Tapis Volume.  Use the **zip** query parameter to request directories as a zip archive. This is not allowed if path would result in all files in the volume being included. Please download individual directories, files or objects.
     * get_volume_contents
     */
    async getVolumeContentsRaw(requestParameters: GetVolumeContentsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.volumeId === null || requestParameters.volumeId === undefined) {
            throw new runtime.RequiredError('volumeId','Required parameter requestParameters.volumeId was null or undefined when calling getVolumeContents.');
        }

        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling getVolumeContents.');
        }

        const queryParameters: any = {};

        if (requestParameters.zip !== undefined) {
            queryParameters['zip'] = requestParameters.zip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods/volumes/{volume_id}/contents/{path}`.replace(`{${"volume_id"}}`, encodeURIComponent(String(requestParameters.volumeId))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get file or directory contents as a stream of data from a Tapis Volume.  Use the **zip** query parameter to request directories as a zip archive. This is not allowed if path would result in all files in the volume being included. Please download individual directories, files or objects.
     * get_volume_contents
     */
    async getVolumeContents(requestParameters: GetVolumeContentsRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.getVolumeContentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List files in volume.
     * list_volume_files
     */
    async listVolumeFilesRaw(requestParameters: ListVolumeFilesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FilesListResponse>> {
        if (requestParameters.volumeId === null || requestParameters.volumeId === undefined) {
            throw new runtime.RequiredError('volumeId','Required parameter requestParameters.volumeId was null or undefined when calling listVolumeFiles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods/volumes/{volume_id}/list`.replace(`{${"volume_id"}}`, encodeURIComponent(String(requestParameters.volumeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FilesListResponseFromJSON(jsonValue));
    }

    /**
     * List files in volume.
     * list_volume_files
     */
    async listVolumeFiles(requestParameters: ListVolumeFilesRequest, initOverrides?: RequestInit): Promise<FilesListResponse> {
        const response = await this.listVolumeFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all volumes in your respective tenant and site that you have READ or higher access to.  Returns a list of volumes.
     * list_volumes
     */
    async listVolumesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<VolumesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/pods/volumes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VolumesResponseFromJSON(jsonValue));
    }

    /**
     * Get all volumes in your respective tenant and site that you have READ or higher access to.  Returns a list of volumes.
     * list_volumes
     */
    async listVolumes(initOverrides?: RequestInit): Promise<VolumesResponse> {
        const response = await this.listVolumesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update a volume.  Note: - Fields that change volume source or sink are not modifiable. Please recreate your volume in that case.  Returns updated volume object.
     * update_volume
     */
    async updateVolumeRaw(requestParameters: UpdateVolumeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VolumeResponse>> {
        if (requestParameters.volumeId === null || requestParameters.volumeId === undefined) {
            throw new runtime.RequiredError('volumeId','Required parameter requestParameters.volumeId was null or undefined when calling updateVolume.');
        }

        if (requestParameters.updateVolume === null || requestParameters.updateVolume === undefined) {
            throw new runtime.RequiredError('updateVolume','Required parameter requestParameters.updateVolume was null or undefined when calling updateVolume.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/pods/volumes/{volume_id}`.replace(`{${"volume_id"}}`, encodeURIComponent(String(requestParameters.volumeId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateVolumeToJSON(requestParameters.updateVolume),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VolumeResponseFromJSON(jsonValue));
    }

    /**
     * Update a volume.  Note: - Fields that change volume source or sink are not modifiable. Please recreate your volume in that case.  Returns updated volume object.
     * update_volume
     */
    async updateVolume(requestParameters: UpdateVolumeRequest, initOverrides?: RequestInit): Promise<VolumeResponse> {
        const response = await this.updateVolumeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload to volume.
     * upload_to_volume
     */
    async uploadToVolumeRaw(requestParameters: UploadToVolumeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FilesUploadResponse>> {
        if (requestParameters.volumeId === null || requestParameters.volumeId === undefined) {
            throw new runtime.RequiredError('volumeId','Required parameter requestParameters.volumeId was null or undefined when calling uploadToVolume.');
        }

        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling uploadToVolume.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling uploadToVolume.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/v3/pods/volumes/{volume_id}/upload/{path}`.replace(`{${"volume_id"}}`, encodeURIComponent(String(requestParameters.volumeId))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FilesUploadResponseFromJSON(jsonValue));
    }

    /**
     * Upload to volume.
     * upload_to_volume
     */
    async uploadToVolume(requestParameters: UploadToVolumeRequest, initOverrides?: RequestInit): Promise<FilesUploadResponse> {
        const response = await this.uploadToVolumeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
