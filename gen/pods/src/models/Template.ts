/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Pods Service
 *  The Pods Service is a web service and distributed computing platform providing pods-as-a-service (PaaS). The service  implements a message broker and processor model that requests pods, alongside a health module to poll for pod data, including logs, status, and health. The primary use of this service is to have quick to deploy long-lived services based on Docker images that are exposed via HTTP or TCP endpoints listed by the API.  **The Pods service provides functionality for two types of pod solutions:**  * **Templated Pods** for run-as-is popular images. Neo4J is one example, the template manages TCP ports, user creation, and permissions.  * **Custom Pods** for arbitrary docker images with less functionality. In this case we will expose port 5000 and do nothing else.   The live-docs act as the most up-to-date API reference. Visit the [documentation for more information](https://tapis.readthedocs.io/en/latest/technical/pods.html). 
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Template
 */
export interface Template {
    /**
     * Name of template.
     * @type {string}
     * @memberof Template
     */
    template_id: string;
    /**
     * Description of template.
     * @type {string}
     * @memberof Template
     */
    description?: string;
    /**
     * Metadata tags for additional search/listing functionality for the template.
     * @type {Array<string>}
     * @memberof Template
     */
    metatags?: Array<string>;
    /**
     * If set, metadata message to give users of this template.
     * @type {string}
     * @memberof Template
     */
    archive_message?: string;
    /**
     * Time (UTC) that this template was created.
     * @type {Date}
     * @memberof Template
     */
    creation_ts?: Date;
    /**
     * Time (UTC) that this template was updated.
     * @type {Date}
     * @memberof Template
     */
    update_ts?: Date;
    /**
     * Tapis tenant used during creation of this template.
     * @type {string}
     * @memberof Template
     */
    tenant_id?: string;
    /**
     * Tapis site used during creation of this template.
     * @type {string}
     * @memberof Template
     */
    site_id?: string;
    /**
     * Template permissions in user:level format.
     * @type {Array<string>}
     * @memberof Template
     */
    permissions?: Array<string>;
}

export function TemplateFromJSON(json: any): Template {
    return TemplateFromJSONTyped(json, false);
}

export function TemplateFromJSONTyped(json: any, ignoreDiscriminator: boolean): Template {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'template_id': json['template_id'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'metatags': !exists(json, 'metatags') ? undefined : json['metatags'],
        'archive_message': !exists(json, 'archive_message') ? undefined : json['archive_message'],
        'creation_ts': !exists(json, 'creation_ts') ? undefined : (new Date(json['creation_ts'])),
        'update_ts': !exists(json, 'update_ts') ? undefined : (new Date(json['update_ts'])),
        'tenant_id': !exists(json, 'tenant_id') ? undefined : json['tenant_id'],
        'site_id': !exists(json, 'site_id') ? undefined : json['site_id'],
        'permissions': !exists(json, 'permissions') ? undefined : json['permissions'],
    };
}

export function TemplateToJSON(value?: Template | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'template_id': value.template_id,
        'description': value.description,
        'metatags': value.metatags,
        'archive_message': value.archive_message,
        'creation_ts': value.creation_ts === undefined ? undefined : (value.creation_ts.toISOString()),
        'update_ts': value.update_ts === undefined ? undefined : (value.update_ts.toISOString()),
        'tenant_id': value.tenant_id,
        'site_id': value.site_id,
        'permissions': value.permissions,
    };
}

