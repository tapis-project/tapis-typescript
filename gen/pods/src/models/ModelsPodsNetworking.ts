/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Pods Service
 *  The Pods Service is a web service and distributed computing platform providing pods-as-a-service (PaaS). The service  implements a message broker and processor model that requests pods, alongside a health module to poll for pod data, including logs, status, and health. The primary use of this service is to have quick to deploy long-lived services based on Docker images that are exposed via HTTP or TCP endpoints listed by the API.  **The Pods service provides functionality for two types of pod solutions:**  * **Templated Pods** for run-as-is popular images. Neo4J is one example, the template manages TCP ports, user creation, and permissions.  * **Custom Pods** for arbitrary docker images with less functionality. In this case we will expose port 5000 and do nothing else.   The live-docs act as the most up-to-date API reference. Visit the [documentation for more information](https://tapis.readthedocs.io/en/latest/technical/pods.html). 
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ModelsPodsNetworking
 */
export interface ModelsPodsNetworking {
    /**
     * Which network protocol to use. `http`, `tcp`, `postgres`, or `local_only`. `local_only` is only accessible from within the cluster.
     * @type {string}
     * @memberof ModelsPodsNetworking
     */
    protocol?: string;
    /**
     * Pod port to expose via networking.url in this networking object.
     * @type {number}
     * @memberof ModelsPodsNetworking
     */
    port?: number;
    /**
     * URL used to access the port of the pod defined in this networking object. Generated by service.
     * @type {string}
     * @memberof ModelsPodsNetworking
     */
    url?: string;
    /**
     * List of IPs that are allowed to access this specific pod port. If empty, all IPs are allowed. ex. ['127.0.0.1/32', '192.168.1.7']
     * @type {Array<string>}
     * @memberof ModelsPodsNetworking
     */
    ip_allow_list?: Array<string>;
    /**
     * If true, will require Tapis auth to access the pod.
     * @type {boolean}
     * @memberof ModelsPodsNetworking
     */
    tapis_auth?: boolean;
    /**
     * List of headers to forward to the pod when using Tapis auth.
     * @type {Array<string>}
     * @memberof ModelsPodsNetworking
     */
    tapis_auth_response_headers?: Array<string>;
    /**
     * List of users allowed to access the pod when using Tapis auth.
     * @type {Array<string>}
     * @memberof ModelsPodsNetworking
     */
    tapis_auth_allowed_users?: Array<string>;
    /**
     * Path to redirect to when accessing the pod via Tapis UI.
     * @type {string}
     * @memberof ModelsPodsNetworking
     */
    tapis_ui_uri?: string;
    /**
     * If true, will redirect to the tapis_ui_uri when accessing the pod via Tapis UI. Otherwise, just read-only uri.
     * @type {boolean}
     * @memberof ModelsPodsNetworking
     */
    tapis_ui_uri_redirect?: boolean;
    /**
     * Describing where the tapis_ui_uri will redirect to.
     * @type {string}
     * @memberof ModelsPodsNetworking
     */
    tapis_ui_uri_description?: string;
}

export function ModelsPodsNetworkingFromJSON(json: any): ModelsPodsNetworking {
    return ModelsPodsNetworkingFromJSONTyped(json, false);
}

export function ModelsPodsNetworkingFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelsPodsNetworking {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'protocol': !exists(json, 'protocol') ? undefined : json['protocol'],
        'port': !exists(json, 'port') ? undefined : json['port'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'ip_allow_list': !exists(json, 'ip_allow_list') ? undefined : json['ip_allow_list'],
        'tapis_auth': !exists(json, 'tapis_auth') ? undefined : json['tapis_auth'],
        'tapis_auth_response_headers': !exists(json, 'tapis_auth_response_headers') ? undefined : json['tapis_auth_response_headers'],
        'tapis_auth_allowed_users': !exists(json, 'tapis_auth_allowed_users') ? undefined : json['tapis_auth_allowed_users'],
        'tapis_ui_uri': !exists(json, 'tapis_ui_uri') ? undefined : json['tapis_ui_uri'],
        'tapis_ui_uri_redirect': !exists(json, 'tapis_ui_uri_redirect') ? undefined : json['tapis_ui_uri_redirect'],
        'tapis_ui_uri_description': !exists(json, 'tapis_ui_uri_description') ? undefined : json['tapis_ui_uri_description'],
    };
}

export function ModelsPodsNetworkingToJSON(value?: ModelsPodsNetworking | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'protocol': value.protocol,
        'port': value.port,
        'url': value.url,
        'ip_allow_list': value.ip_allow_list,
        'tapis_auth': value.tapis_auth,
        'tapis_auth_response_headers': value.tapis_auth_response_headers,
        'tapis_auth_allowed_users': value.tapis_auth_allowed_users,
        'tapis_ui_uri': value.tapis_ui_uri,
        'tapis_ui_uri_redirect': value.tapis_ui_uri_redirect,
        'tapis_ui_uri_description': value.tapis_ui_uri_description,
    };
}

