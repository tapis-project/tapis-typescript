/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Pods Service
 *  The Pods Service is a web service and distributed computing platform providing pods-as-a-service (PaaS). The service  implements a message broker and processor model that requests pods, alongside a health module to poll for pod data, including logs, status, and health. The primary use of this service is to have quick to deploy long-lived services based on Docker images that are exposed via HTTP or TCP endpoints listed by the API.  **The Pods service provides functionality for two types of pod solutions:**  * **Templated Pods** for run-as-is popular images. Neo4J is one example, the template manages TCP ports, user creation, and permissions.  * **Custom Pods** for arbitrary docker images with less functionality. In this case we will expose port 5000 and do nothing else.   The live-docs act as the most up-to-date API reference. Visit the [documentation for more information](https://tapis.readthedocs.io/en/latest/technical/pods.html). 
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ModelsTemplatesTagsNetworking
 */
export interface ModelsTemplatesTagsNetworking {
    /**
     * Which network protocol to use. `http`, `tcp`, `postgres`, or `local_only`. `local_only` is only accessible from within the cluster.
     * @type {string}
     * @memberof ModelsTemplatesTagsNetworking
     */
    protocol?: string;
    /**
     * Pod port to expose via networking.url in this networking object.
     * @type {number}
     * @memberof ModelsTemplatesTagsNetworking
     */
    port?: number;
    /**
     * URL used to access the port of the pod defined in this networking object. Generated by service.
     * @type {string}
     * @memberof ModelsTemplatesTagsNetworking
     */
    url?: string;
}

export function ModelsTemplatesTagsNetworkingFromJSON(json: any): ModelsTemplatesTagsNetworking {
    return ModelsTemplatesTagsNetworkingFromJSONTyped(json, false);
}

export function ModelsTemplatesTagsNetworkingFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelsTemplatesTagsNetworking {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'protocol': !exists(json, 'protocol') ? undefined : json['protocol'],
        'port': !exists(json, 'port') ? undefined : json['port'],
        'url': !exists(json, 'url') ? undefined : json['url'],
    };
}

export function ModelsTemplatesTagsNetworkingToJSON(value?: ModelsTemplatesTagsNetworking | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'protocol': value.protocol,
        'port': value.port,
        'url': value.url,
    };
}

