/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Pods Service
 *  The Pods Service is a web service and distributed computing platform providing pods-as-a-service (PaaS). The service  implements a message broker and processor model that requests pods, alongside a health module to poll for pod data, including logs, status, and health. The primary use of this service is to have quick to deploy long-lived services based on Docker images that are exposed via HTTP or TCP endpoints listed by the API.  **The Pods service provides functionality for two types of pod solutions:**  * **Templated Pods** for run-as-is popular images. Neo4J is one example, the template manages TCP ports, user creation, and permissions.  * **Custom Pods** for arbitrary docker images with less functionality. In this case we will expose port 5000 and do nothing else.   The live-docs act as the most up-to-date API reference. Visit the [documentation for more information](https://tapis.readthedocs.io/en/latest/technical/pods.html). 
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ModelsPodsResources
 */
export interface ModelsPodsResources {
    /**
     * CPU allocation pod requests at startup. In millicpus (m). 1000 = 1 cpu.
     * @type {number}
     * @memberof ModelsPodsResources
     */
    cpu_request?: number;
    /**
     * CPU allocation pod is allowed to use. In millicpus (m). 1000 = 1 cpu.
     * @type {number}
     * @memberof ModelsPodsResources
     */
    cpu_limit?: number;
    /**
     * Memory allocation pod requests at startup. In megabytes (Mi)
     * @type {number}
     * @memberof ModelsPodsResources
     */
    mem_request?: number;
    /**
     * Memory allocation pod is allowed to use. In megabytes (Mi)
     * @type {number}
     * @memberof ModelsPodsResources
     */
    mem_limit?: number;
    /**
     * GPU allocation pod is allowed to use. In integers of GPUs. (we only have 1 currently ;) )
     * @type {number}
     * @memberof ModelsPodsResources
     */
    gpus?: number;
}

export function ModelsPodsResourcesFromJSON(json: any): ModelsPodsResources {
    return ModelsPodsResourcesFromJSONTyped(json, false);
}

export function ModelsPodsResourcesFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelsPodsResources {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cpu_request': !exists(json, 'cpu_request') ? undefined : json['cpu_request'],
        'cpu_limit': !exists(json, 'cpu_limit') ? undefined : json['cpu_limit'],
        'mem_request': !exists(json, 'mem_request') ? undefined : json['mem_request'],
        'mem_limit': !exists(json, 'mem_limit') ? undefined : json['mem_limit'],
        'gpus': !exists(json, 'gpus') ? undefined : json['gpus'],
    };
}

export function ModelsPodsResourcesToJSON(value?: ModelsPodsResources | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cpu_request': value.cpu_request,
        'cpu_limit': value.cpu_limit,
        'mem_request': value.mem_request,
        'mem_limit': value.mem_limit,
        'gpus': value.gpus,
    };
}

