/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Pods Service
 *  The Pods Service is a web service and distributed computing platform providing pods-as-a-service (PaaS). The service  implements a message broker and processor model that requests pods, alongside a health module to poll for pod data, including logs, status, and health. The primary use of this service is to have quick to deploy long-lived services based on Docker images that are exposed via HTTP or TCP endpoints listed by the API.  **The Pods service provides functionality for two types of pod solutions:**  * **Templated Pods** for run-as-is popular images. Neo4J is one example, the template manages TCP ports, user creation, and permissions.  * **Custom Pods** for arbitrary docker images with less functionality. In this case we will expose port 5000 and do nothing else.   The live-docs act as the most up-to-date API reference. Visit the [documentation for more information](https://tapis.readthedocs.io/en/latest/technical/pods.html). 
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TemplateTagNoDefinition
 */
export interface TemplateTagNoDefinition {
    /**
     * Time (UTC) that this template tag was created.
     * @type {Date}
     * @memberof TemplateTagNoDefinition
     */
    creation_ts?: Date;
    /**
     * User who added this template tag.
     * @type {string}
     * @memberof TemplateTagNoDefinition
     */
    added_by?: string;
    /**
     * Commit message for this template tag.
     * @type {string}
     * @memberof TemplateTagNoDefinition
     */
    commit_message?: string;
    /**
     * Tag for this template. Default is 'latest'.
     * @type {string}
     * @memberof TemplateTagNoDefinition
     */
    tag?: string;
    /**
     * tag@timestamp for this template tag.
     * @type {string}
     * @memberof TemplateTagNoDefinition
     */
    tag_timestamp?: string;
}

export function TemplateTagNoDefinitionFromJSON(json: any): TemplateTagNoDefinition {
    return TemplateTagNoDefinitionFromJSONTyped(json, false);
}

export function TemplateTagNoDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): TemplateTagNoDefinition {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'creation_ts': !exists(json, 'creation_ts') ? undefined : (new Date(json['creation_ts'])),
        'added_by': !exists(json, 'added_by') ? undefined : json['added_by'],
        'commit_message': !exists(json, 'commit_message') ? undefined : json['commit_message'],
        'tag': !exists(json, 'tag') ? undefined : json['tag'],
        'tag_timestamp': !exists(json, 'tag_timestamp') ? undefined : json['tag_timestamp'],
    };
}

export function TemplateTagNoDefinitionToJSON(value?: TemplateTagNoDefinition | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'creation_ts': value.creation_ts === undefined ? undefined : (value.creation_ts.toISOString()),
        'added_by': value.added_by,
        'commit_message': value.commit_message,
        'tag': value.tag,
        'tag_timestamp': value.tag_timestamp,
    };
}

