/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Workflows API
 * Create and manage pipelines
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ReqTask,
    ReqTaskFromJSON,
    ReqTaskToJSON,
    RespError,
    RespErrorFromJSON,
    RespErrorToJSON,
    RespResourceURL,
    RespResourceURLFromJSON,
    RespResourceURLToJSON,
    RespString,
    RespStringFromJSON,
    RespStringToJSON,
    RespTask,
    RespTaskFromJSON,
    RespTaskToJSON,
    RespTaskList,
    RespTaskListFromJSON,
    RespTaskListToJSON,
    Task,
    TaskFromJSON,
    TaskToJSON,
} from '../models';

export interface CreateTaskRequest {
    groupId: string;
    pipelineId: string;
    reqTask: ReqTask;
}

export interface DeleteTaskRequest {
    groupId: string;
    pipelineId: string;
    taskId: string;
}

export interface GetTaskRequest {
    groupId: string;
    pipelineId: string;
    taskId: string;
}

export interface ListTasksRequest {
    groupId: string;
    pipelineId: string;
}

export interface PatchTaskRequest {
    groupId: string;
    pipelineId: string;
    taskId: string;
    task: Task;
}

/**
 * 
 */
export class TasksApi extends runtime.BaseAPI {

    /**
     * Create a task for a pipeline 
     * Create a task
     */
    async createTaskRaw(requestParameters: CreateTaskRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespResourceURL>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling createTask.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling createTask.');
        }

        if (requestParameters.reqTask === null || requestParameters.reqTask === undefined) {
            throw new runtime.RequiredError('reqTask','Required parameter requestParameters.reqTask was null or undefined when calling createTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/tasks`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"pipeline_id"}}`, encodeURIComponent(String(requestParameters.pipelineId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqTaskToJSON(requestParameters.reqTask),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespResourceURLFromJSON(jsonValue));
    }

    /**
     * Create a task for a pipeline 
     * Create a task
     */
    async createTask(requestParameters: CreateTaskRequest, initOverrides?: RequestInit): Promise<RespResourceURL> {
        const response = await this.createTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a task 
     * Delete a task
     */
    async deleteTaskRaw(requestParameters: DeleteTaskRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespString>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling deleteTask.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling deleteTask.');
        }

        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling deleteTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/tasks/{task_id}`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"pipeline_id"}}`, encodeURIComponent(String(requestParameters.pipelineId))).replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespStringFromJSON(jsonValue));
    }

    /**
     * Delete a task 
     * Delete a task
     */
    async deleteTask(requestParameters: DeleteTaskRequest, initOverrides?: RequestInit): Promise<RespString> {
        const response = await this.deleteTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve task details for given pipeline id and task id 
     * Retrieve task details
     */
    async getTaskRaw(requestParameters: GetTaskRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespTask>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling getTask.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling getTask.');
        }

        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling getTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/tasks/{task_id}`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"pipeline_id"}}`, encodeURIComponent(String(requestParameters.pipelineId))).replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespTaskFromJSON(jsonValue));
    }

    /**
     * Retrieve task details for given pipeline id and task id 
     * Retrieve task details
     */
    async getTask(requestParameters: GetTaskRequest, initOverrides?: RequestInit): Promise<RespTask> {
        const response = await this.getTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all tasks in all pipelines from all groups 
     * List all tasks
     */
    async listAllTasksRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespTaskList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/workflows/tasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespTaskListFromJSON(jsonValue));
    }

    /**
     * Get a list of all tasks in all pipelines from all groups 
     * List all tasks
     */
    async listAllTasks(initOverrides?: RequestInit): Promise<RespTaskList> {
        const response = await this.listAllTasksRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all tasks for a given pipeline 
     * List tasks
     */
    async listTasksRaw(requestParameters: ListTasksRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespTaskList>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling listTasks.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling listTasks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/tasks`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"pipeline_id"}}`, encodeURIComponent(String(requestParameters.pipelineId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespTaskListFromJSON(jsonValue));
    }

    /**
     * Retrieve all tasks for a given pipeline 
     * List tasks
     */
    async listTasks(requestParameters: ListTasksRequest, initOverrides?: RequestInit): Promise<RespTaskList> {
        const response = await this.listTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update details for a task
     * Update task details
     */
    async patchTaskRaw(requestParameters: PatchTaskRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespTask>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling patchTask.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling patchTask.');
        }

        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling patchTask.');
        }

        if (requestParameters.task === null || requestParameters.task === undefined) {
            throw new runtime.RequiredError('task','Required parameter requestParameters.task was null or undefined when calling patchTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/tasks/{task_id}`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"pipeline_id"}}`, encodeURIComponent(String(requestParameters.pipelineId))).replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TaskToJSON(requestParameters.task),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespTaskFromJSON(jsonValue));
    }

    /**
     * Update details for a task
     * Update task details
     */
    async patchTask(requestParameters: PatchTaskRequest, initOverrides?: RequestInit): Promise<RespTask> {
        const response = await this.patchTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
