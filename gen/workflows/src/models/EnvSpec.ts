/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Workflows API
 * Create and manage pipelines
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EnvSpecAllOf,
    EnvSpecAllOfFromJSON,
    EnvSpecAllOfFromJSONTyped,
    EnvSpecAllOfToJSON,
    SpecWithValue,
    SpecWithValueFromJSON,
    SpecWithValueFromJSONTyped,
    SpecWithValueToJSON,
    Value,
    ValueFromJSON,
    ValueFromJSONTyped,
    ValueToJSON,
    ValueFromSecretOrHost,
    ValueFromSecretOrHostFromJSON,
    ValueFromSecretOrHostFromJSONTyped,
    ValueFromSecretOrHostToJSON,
} from './';

/**
 * 
 * @export
 * @interface EnvSpec
 */
export interface EnvSpec {
    /**
     * 
     * @type {string}
     * @memberof EnvSpec
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EnvSpec
     */
    required?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EnvSpec
     */
    type?: string;
    /**
     * 
     * @type {Value}
     * @memberof EnvSpec
     */
    value?: Value;
    /**
     * 
     * @type {ValueFromSecretOrHost}
     * @memberof EnvSpec
     */
    value_from?: ValueFromSecretOrHost;
}

export function EnvSpecFromJSON(json: any): EnvSpec {
    return EnvSpecFromJSONTyped(json, false);
}

export function EnvSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): EnvSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'required': !exists(json, 'required') ? undefined : json['required'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'value': !exists(json, 'value') ? undefined : ValueFromJSON(json['value']),
        'value_from': !exists(json, 'value_from') ? undefined : ValueFromSecretOrHostFromJSON(json['value_from']),
    };
}

export function EnvSpecToJSON(value?: EnvSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'required': value.required,
        'type': value.type,
        'value': ValueToJSON(value.value),
        'value_from': ValueFromSecretOrHostToJSON(value.value_from),
    };
}

