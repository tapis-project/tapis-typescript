/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Workflows API
 * Create and manage pipelines
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ApplicationTask,
    ApplicationTaskFromJSON,
    ApplicationTaskFromJSONTyped,
    ApplicationTaskToJSON,
    Context,
    ContextFromJSON,
    ContextFromJSONTyped,
    ContextToJSON,
    Destination,
    DestinationFromJSON,
    DestinationFromJSONTyped,
    DestinationToJSON,
    EnumBuilder,
    EnumBuilderFromJSON,
    EnumBuilderFromJSONTyped,
    EnumBuilderToJSON,
    EnumHTTPMethod,
    EnumHTTPMethodFromJSON,
    EnumHTTPMethodFromJSONTyped,
    EnumHTTPMethodToJSON,
    EnumInstaller,
    EnumInstallerFromJSON,
    EnumInstallerFromJSONTyped,
    EnumInstallerToJSON,
    EnumRuntimeEnvironment,
    EnumRuntimeEnvironmentFromJSON,
    EnumRuntimeEnvironmentFromJSONTyped,
    EnumRuntimeEnvironmentToJSON,
    EnumTaskType,
    EnumTaskTypeFromJSON,
    EnumTaskTypeFromJSONTyped,
    EnumTaskTypeToJSON,
    FunctionTask,
    FunctionTaskFromJSON,
    FunctionTaskFromJSONTyped,
    FunctionTaskToJSON,
    GitCloneDetails,
    GitCloneDetailsFromJSON,
    GitCloneDetailsFromJSONTyped,
    GitCloneDetailsToJSON,
    ImageBuildTask,
    ImageBuildTaskFromJSON,
    ImageBuildTaskFromJSONTyped,
    ImageBuildTaskToJSON,
    RequestTask,
    RequestTaskFromJSON,
    RequestTaskFromJSONTyped,
    RequestTaskToJSON,
    SpecWithValue,
    SpecWithValueFromJSON,
    SpecWithValueFromJSONTyped,
    SpecWithValueToJSON,
    TapisActorTask,
    TapisActorTaskFromJSON,
    TapisActorTaskFromJSONTyped,
    TapisActorTaskToJSON,
    TapisJobTask,
    TapisJobTaskFromJSON,
    TapisJobTaskFromJSONTyped,
    TapisJobTaskToJSON,
    TaskDependency,
    TaskDependencyFromJSON,
    TaskDependencyFromJSONTyped,
    TaskDependencyToJSON,
    TaskExecutionProfile,
    TaskExecutionProfileFromJSON,
    TaskExecutionProfileFromJSONTyped,
    TaskExecutionProfileToJSON,
    TemplateTask,
    TemplateTaskFromJSON,
    TemplateTaskFromJSONTyped,
    TemplateTaskToJSON,
    Uses,
    UsesFromJSON,
    UsesFromJSONTyped,
    UsesToJSON,
} from './';

/**
 * 
 * @export
 * @interface ReqPatchTask
 */
export interface ReqPatchTask {
    /**
     * 
     * @type {string}
     * @memberof ReqPatchTask
     */
    id?: string;
    /**
     * 
     * @type {EnumTaskType}
     * @memberof ReqPatchTask
     */
    type?: EnumTaskType;
    /**
     * 
     * @type {Array<TaskDependency>}
     * @memberof ReqPatchTask
     */
    depends_on?: Array<TaskDependency>;
    /**
     * 
     * @type {string}
     * @memberof ReqPatchTask
     */
    description?: string;
    /**
     * 
     * @type {TaskExecutionProfile}
     * @memberof ReqPatchTask
     */
    execution_profile?: TaskExecutionProfile;
    /**
     * 
     * @type {{ [key: string]: SpecWithValue; }}
     * @memberof ReqPatchTask
     */
    input?: { [key: string]: SpecWithValue; };
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ReqPatchTask
     */
    output?: { [key: string]: object; };
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof ReqPatchTask
     */
    conditions?: Array<{ [key: string]: object; }>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ReqPatchTask
     */
    tags?: Array<string>;
    /**
     * 
     * @type {EnumBuilder}
     * @memberof ReqPatchTask
     */
    builder?: EnumBuilder;
    /**
     * 
     * @type {boolean}
     * @memberof ReqPatchTask
     */
    cache?: boolean;
    /**
     * 
     * @type {Context}
     * @memberof ReqPatchTask
     */
    context?: Context;
    /**
     * 
     * @type {Destination}
     * @memberof ReqPatchTask
     */
    destination?: Destination;
    /**
     * 
     * @type {object}
     * @memberof ReqPatchTask
     */
    auth?: object;
    /**
     * 
     * @type {object}
     * @memberof ReqPatchTask
     */
    data?: object;
    /**
     * 
     * @type {object}
     * @memberof ReqPatchTask
     */
    headers?: object;
    /**
     * 
     * @type {EnumHTTPMethod}
     * @memberof ReqPatchTask
     */
    http_method?: EnumHTTPMethod;
    /**
     * 
     * @type {object}
     * @memberof ReqPatchTask
     */
    query_params?: object;
    /**
     * 
     * @type {string}
     * @memberof ReqPatchTask
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof ReqPatchTask
     */
    image?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ReqPatchTask
     */
    poll?: boolean;
    /**
     * 
     * @type {object}
     * @memberof ReqPatchTask
     */
    tapis_job_def?: object;
    /**
     * 
     * @type {string}
     * @memberof ReqPatchTask
     */
    tapis_actor_id?: string;
    /**
     * 
     * @type {string}
     * @memberof ReqPatchTask
     */
    tapis_actor_message?: string | null;
    /**
     * 
     * @type {Array<GitCloneDetails>}
     * @memberof ReqPatchTask
     */
    git_repositories?: Array<GitCloneDetails>;
    /**
     * 
     * @type {EnumRuntimeEnvironment}
     * @memberof ReqPatchTask
     */
    runtime?: EnumRuntimeEnvironment;
    /**
     * 
     * @type {EnumInstaller}
     * @memberof ReqPatchTask
     */
    installer?: EnumInstaller;
    /**
     * 
     * @type {string}
     * @memberof ReqPatchTask
     */
    command?: string;
    /**
     * 
     * @type {string}
     * @memberof ReqPatchTask
     */
    entrypoint?: string;
    /**
     * 
     * @type {string}
     * @memberof ReqPatchTask
     */
    code?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ReqPatchTask
     */
    packages?: Array<string>;
    /**
     * 
     * @type {Uses}
     * @memberof ReqPatchTask
     */
    uses?: Uses;
}

export function ReqPatchTaskFromJSON(json: any): ReqPatchTask {
    return ReqPatchTaskFromJSONTyped(json, false);
}

export function ReqPatchTaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReqPatchTask {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'type': !exists(json, 'type') ? undefined : EnumTaskTypeFromJSON(json['type']),
        'depends_on': !exists(json, 'depends_on') ? undefined : ((json['depends_on'] as Array<any>).map(TaskDependencyFromJSON)),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'execution_profile': !exists(json, 'execution_profile') ? undefined : TaskExecutionProfileFromJSON(json['execution_profile']),
        'input': !exists(json, 'input') ? undefined : (mapValues(json['input'], SpecWithValueFromJSON)),
        'output': !exists(json, 'output') ? undefined : json['output'],
        'conditions': !exists(json, 'conditions') ? undefined : json['conditions'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'builder': !exists(json, 'builder') ? undefined : EnumBuilderFromJSON(json['builder']),
        'cache': !exists(json, 'cache') ? undefined : json['cache'],
        'context': !exists(json, 'context') ? undefined : ContextFromJSON(json['context']),
        'destination': !exists(json, 'destination') ? undefined : DestinationFromJSON(json['destination']),
        'auth': !exists(json, 'auth') ? undefined : json['auth'],
        'data': !exists(json, 'data') ? undefined : json['data'],
        'headers': !exists(json, 'headers') ? undefined : json['headers'],
        'http_method': !exists(json, 'http_method') ? undefined : EnumHTTPMethodFromJSON(json['http_method']),
        'query_params': !exists(json, 'query_params') ? undefined : json['query_params'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'image': !exists(json, 'image') ? undefined : json['image'],
        'poll': !exists(json, 'poll') ? undefined : json['poll'],
        'tapis_job_def': !exists(json, 'tapis_job_def') ? undefined : json['tapis_job_def'],
        'tapis_actor_id': !exists(json, 'tapis_actor_id') ? undefined : json['tapis_actor_id'],
        'tapis_actor_message': !exists(json, 'tapis_actor_message') ? undefined : json['tapis_actor_message'],
        'git_repositories': !exists(json, 'git_repositories') ? undefined : ((json['git_repositories'] as Array<any>).map(GitCloneDetailsFromJSON)),
        'runtime': !exists(json, 'runtime') ? undefined : EnumRuntimeEnvironmentFromJSON(json['runtime']),
        'installer': !exists(json, 'installer') ? undefined : EnumInstallerFromJSON(json['installer']),
        'command': !exists(json, 'command') ? undefined : json['command'],
        'entrypoint': !exists(json, 'entrypoint') ? undefined : json['entrypoint'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'packages': !exists(json, 'packages') ? undefined : json['packages'],
        'uses': !exists(json, 'uses') ? undefined : UsesFromJSON(json['uses']),
    };
}

export function ReqPatchTaskToJSON(value?: ReqPatchTask | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': EnumTaskTypeToJSON(value.type),
        'depends_on': value.depends_on === undefined ? undefined : ((value.depends_on as Array<any>).map(TaskDependencyToJSON)),
        'description': value.description,
        'execution_profile': TaskExecutionProfileToJSON(value.execution_profile),
        'input': value.input === undefined ? undefined : (mapValues(value.input, SpecWithValueToJSON)),
        'output': value.output,
        'conditions': value.conditions,
        'tags': value.tags,
        'builder': EnumBuilderToJSON(value.builder),
        'cache': value.cache,
        'context': ContextToJSON(value.context),
        'destination': DestinationToJSON(value.destination),
        'auth': value.auth,
        'data': value.data,
        'headers': value.headers,
        'http_method': EnumHTTPMethodToJSON(value.http_method),
        'query_params': value.query_params,
        'url': value.url,
        'image': value.image,
        'poll': value.poll,
        'tapis_job_def': value.tapis_job_def,
        'tapis_actor_id': value.tapis_actor_id,
        'tapis_actor_message': value.tapis_actor_message,
        'git_repositories': value.git_repositories === undefined ? undefined : ((value.git_repositories as Array<any>).map(GitCloneDetailsToJSON)),
        'runtime': EnumRuntimeEnvironmentToJSON(value.runtime),
        'installer': EnumInstallerToJSON(value.installer),
        'command': value.command,
        'entrypoint': value.entrypoint,
        'code': value.code,
        'packages': value.packages,
        'uses': UsesToJSON(value.uses),
    };
}

