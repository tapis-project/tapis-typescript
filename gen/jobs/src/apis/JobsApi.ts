/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Jobs API
 * The Tapis Jobs API executes jobs on Tapis systems.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ReqSubmitJob,
    ReqSubmitJobFromJSON,
    ReqSubmitJobToJSON,
    ReqUserEvent,
    ReqUserEventFromJSON,
    ReqUserEventToJSON,
    RespBasic,
    RespBasicFromJSON,
    RespBasicToJSON,
    RespCancelJob,
    RespCancelJobFromJSON,
    RespCancelJobToJSON,
    RespGetJob,
    RespGetJobFromJSON,
    RespGetJobToJSON,
    RespGetJobList,
    RespGetJobListFromJSON,
    RespGetJobListToJSON,
    RespGetJobOutputList,
    RespGetJobOutputListFromJSON,
    RespGetJobOutputListToJSON,
    RespGetJobStatus,
    RespGetJobStatusFromJSON,
    RespGetJobStatusToJSON,
    RespGetResubmit,
    RespGetResubmitFromJSON,
    RespGetResubmitToJSON,
    RespHideJob,
    RespHideJobFromJSON,
    RespHideJobToJSON,
    RespJobHistory,
    RespJobHistoryFromJSON,
    RespJobHistoryToJSON,
    RespJobSearchAllAttributes,
    RespJobSearchAllAttributesFromJSON,
    RespJobSearchAllAttributesToJSON,
    RespName,
    RespNameFromJSON,
    RespNameToJSON,
    RespSubmitJob,
    RespSubmitJobFromJSON,
    RespSubmitJobToJSON,
} from '../models';

export interface CancelJobRequest {
    jobUuid: string;
    pretty?: boolean;
}

export interface GetJobRequest {
    jobUuid: string;
    pretty?: boolean;
}

export interface GetJobHistoryRequest {
    jobUuid: string;
    limit?: number;
    skip?: number;
    pretty?: boolean;
}

export interface GetJobListRequest {
    limit?: number;
    skip?: number;
    startAfter?: number;
    orderBy?: string;
    computeTotal?: boolean;
    listType?: string;
    pretty?: boolean;
}

export interface GetJobOutputDownloadRequest {
    jobUuid: string;
    outputPath: string;
    compress?: boolean;
    format?: string;
    allowIfRunning?: boolean;
    pretty?: boolean;
}

export interface GetJobOutputListRequest {
    jobUuid: string;
    outputPath: string;
    limit?: number;
    skip?: number;
    allowIfRunning?: boolean;
    pretty?: boolean;
}

export interface GetJobSearchListRequest {
    limit?: number;
    skip?: number;
    startAfter?: number;
    orderBy?: string;
    computeTotal?: boolean;
    select?: string;
    listType?: string;
    pretty?: boolean;
}

export interface GetJobSearchListByPostSqlStrRequest {
    limit?: number;
    skip?: number;
    startAfter?: number;
    orderBy?: string;
    computeTotal?: boolean;
    select?: string;
    listType?: string;
    pretty?: boolean;
    body?: object;
}

export interface GetJobStatusRequest {
    jobUuid: string;
    pretty?: boolean;
}

export interface GetResubmitRequestJsonRequest {
    jobUuid: string;
    pretty?: boolean;
}

export interface HideJobRequest {
    jobUuid: string;
    pretty?: boolean;
}

export interface ResubmitJobRequest {
    jobUuid: string;
    pretty?: boolean;
}

export interface SendEventRequest {
    jobUuid: string;
    reqUserEvent: ReqUserEvent;
    pretty?: boolean;
}

export interface SubmitJobRequest {
    reqSubmitJob: ReqSubmitJob;
    pretty?: boolean;
}

export interface UnhideJobRequest {
    jobUuid: string;
    pretty?: boolean;
}

/**
 * 
 */
export class JobsApi extends runtime.BaseAPI {

    /**
     * Cancel a previously submitted job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async cancelJobRaw(requestParameters: CancelJobRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespCancelJob>> {
        if (requestParameters.jobUuid === null || requestParameters.jobUuid === undefined) {
            throw new runtime.RequiredError('jobUuid','Required parameter requestParameters.jobUuid was null or undefined when calling cancelJob.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/{jobUuid}/cancel`.replace(`{${"jobUuid"}}`, encodeURIComponent(String(requestParameters.jobUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespCancelJobFromJSON(jsonValue));
    }

    /**
     * Cancel a previously submitted job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async cancelJob(requestParameters: CancelJobRequest, initOverrides?: RequestInit): Promise<RespCancelJob> {
        const response = await this.cancelJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a previously submitted job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJobRaw(requestParameters: GetJobRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespGetJob>> {
        if (requestParameters.jobUuid === null || requestParameters.jobUuid === undefined) {
            throw new runtime.RequiredError('jobUuid','Required parameter requestParameters.jobUuid was null or undefined when calling getJob.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/{jobUuid}`.replace(`{${"jobUuid"}}`, encodeURIComponent(String(requestParameters.jobUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespGetJobFromJSON(jsonValue));
    }

    /**
     * Retrieve a previously submitted job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJob(requestParameters: GetJobRequest, initOverrides?: RequestInit): Promise<RespGetJob> {
        const response = await this.getJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve history of a previously submitted job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJobHistoryRaw(requestParameters: GetJobHistoryRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespJobHistory>> {
        if (requestParameters.jobUuid === null || requestParameters.jobUuid === undefined) {
            throw new runtime.RequiredError('jobUuid','Required parameter requestParameters.jobUuid was null or undefined when calling getJobHistory.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/{jobUuid}/history`.replace(`{${"jobUuid"}}`, encodeURIComponent(String(requestParameters.jobUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespJobHistoryFromJSON(jsonValue));
    }

    /**
     * Retrieve history of a previously submitted job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJobHistory(requestParameters: GetJobHistoryRequest, initOverrides?: RequestInit): Promise<RespJobHistory> {
        const response = await this.getJobHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve list of jobs for which the user is the job owner, creator or a tenant administrator.  Also list the jobs that are shared with the user. listType allowed are: MY_JOBS, SHARED_JOBS, ALL_JOBS
     */
    async getJobListRaw(requestParameters: GetJobListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespGetJobList>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.startAfter !== undefined) {
            queryParameters['startAfter'] = requestParameters.startAfter;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.computeTotal !== undefined) {
            queryParameters['computeTotal'] = requestParameters.computeTotal;
        }

        if (requestParameters.listType !== undefined) {
            queryParameters['listType'] = requestParameters.listType;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespGetJobListFromJSON(jsonValue));
    }

    /**
     * Retrieve list of jobs for which the user is the job owner, creator or a tenant administrator.  Also list the jobs that are shared with the user. listType allowed are: MY_JOBS, SHARED_JOBS, ALL_JOBS
     */
    async getJobList(requestParameters: GetJobListRequest, initOverrides?: RequestInit): Promise<RespGetJobList> {
        const response = await this.getJobListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download a job\'s output files using the job\'s UUID. By default, the job must be in a terminal state (FINISHED or FAILED or CANCELLED) for this command to execute. To execute when a job is not in a terminal state--and possibly receive incomplete results--set _allowIfRunning=true_.  The caller must be the job owner, creator or a tenant administrator. The _outputPath_ is always relative to the job output directory and must end with a \'/\'.
     */
    async getJobOutputDownloadRaw(requestParameters: GetJobOutputDownloadRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.jobUuid === null || requestParameters.jobUuid === undefined) {
            throw new runtime.RequiredError('jobUuid','Required parameter requestParameters.jobUuid was null or undefined when calling getJobOutputDownload.');
        }

        if (requestParameters.outputPath === null || requestParameters.outputPath === undefined) {
            throw new runtime.RequiredError('outputPath','Required parameter requestParameters.outputPath was null or undefined when calling getJobOutputDownload.');
        }

        const queryParameters: any = {};

        if (requestParameters.compress !== undefined) {
            queryParameters['compress'] = requestParameters.compress;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.allowIfRunning !== undefined) {
            queryParameters['allowIfRunning'] = requestParameters.allowIfRunning;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/{jobUuid}/output/download/{outputPath}`.replace(`{${"jobUuid"}}`, encodeURIComponent(String(requestParameters.jobUuid))).replace(`{${"outputPath"}}`, encodeURIComponent(String(requestParameters.outputPath))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Download a job\'s output files using the job\'s UUID. By default, the job must be in a terminal state (FINISHED or FAILED or CANCELLED) for this command to execute. To execute when a job is not in a terminal state--and possibly receive incomplete results--set _allowIfRunning=true_.  The caller must be the job owner, creator or a tenant administrator. The _outputPath_ is always relative to the job output directory and must end with a \'/\'.
     */
    async getJobOutputDownload(requestParameters: GetJobOutputDownloadRequest, initOverrides?: RequestInit): Promise<Blob> {
        const response = await this.getJobOutputDownloadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a job\'s output file listing using the job\'s UUID. By default, the job must be in a terminal state (FINISHED or FAILED or CANCELLED) for this command to execute. To execute when a job is not in a terminal state--and possibly receive incomplete results--set _allowIfRunning=true_.  The caller must be the job owner, creator or a tenant administrator. The _outputPath_ is always relative to the job output directory and must end with a \'/\'.
     */
    async getJobOutputListRaw(requestParameters: GetJobOutputListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespGetJobOutputList>> {
        if (requestParameters.jobUuid === null || requestParameters.jobUuid === undefined) {
            throw new runtime.RequiredError('jobUuid','Required parameter requestParameters.jobUuid was null or undefined when calling getJobOutputList.');
        }

        if (requestParameters.outputPath === null || requestParameters.outputPath === undefined) {
            throw new runtime.RequiredError('outputPath','Required parameter requestParameters.outputPath was null or undefined when calling getJobOutputList.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.allowIfRunning !== undefined) {
            queryParameters['allowIfRunning'] = requestParameters.allowIfRunning;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/{jobUuid}/output/list/{outputPath}`.replace(`{${"jobUuid"}}`, encodeURIComponent(String(requestParameters.jobUuid))).replace(`{${"outputPath"}}`, encodeURIComponent(String(requestParameters.outputPath))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespGetJobOutputListFromJSON(jsonValue));
    }

    /**
     * Retrieve a job\'s output file listing using the job\'s UUID. By default, the job must be in a terminal state (FINISHED or FAILED or CANCELLED) for this command to execute. To execute when a job is not in a terminal state--and possibly receive incomplete results--set _allowIfRunning=true_.  The caller must be the job owner, creator or a tenant administrator. The _outputPath_ is always relative to the job output directory and must end with a \'/\'.
     */
    async getJobOutputList(requestParameters: GetJobOutputListRequest, initOverrides?: RequestInit): Promise<RespGetJobOutputList> {
        const response = await this.getJobOutputListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve list of jobs for the user based on search conditions in the query paramter on the dedicated search end-point.  The caller must be the job owner, creator or a tenant administrator.  List of Jobs shared with the user can also be searched
     */
    async getJobSearchListRaw(requestParameters: GetJobSearchListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespJobSearchAllAttributes>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.startAfter !== undefined) {
            queryParameters['startAfter'] = requestParameters.startAfter;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.computeTotal !== undefined) {
            queryParameters['computeTotal'] = requestParameters.computeTotal;
        }

        if (requestParameters.select !== undefined) {
            queryParameters['select'] = requestParameters.select;
        }

        if (requestParameters.listType !== undefined) {
            queryParameters['listType'] = requestParameters.listType;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespJobSearchAllAttributesFromJSON(jsonValue));
    }

    /**
     * Retrieve list of jobs for the user based on search conditions in the query paramter on the dedicated search end-point.  The caller must be the job owner, creator or a tenant administrator.  List of Jobs shared with the user can also be searched
     */
    async getJobSearchList(requestParameters: GetJobSearchListRequest, initOverrides?: RequestInit): Promise<RespJobSearchAllAttributes> {
        const response = await this.getJobSearchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve list of jobs for the user based on search conditions in the request body and pagination information from the query paramter on the dedicated search end-point.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJobSearchListByPostSqlStrRaw(requestParameters: GetJobSearchListByPostSqlStrRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespJobSearchAllAttributes>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.startAfter !== undefined) {
            queryParameters['startAfter'] = requestParameters.startAfter;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.computeTotal !== undefined) {
            queryParameters['computeTotal'] = requestParameters.computeTotal;
        }

        if (requestParameters.select !== undefined) {
            queryParameters['select'] = requestParameters.select;
        }

        if (requestParameters.listType !== undefined) {
            queryParameters['listType'] = requestParameters.listType;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespJobSearchAllAttributesFromJSON(jsonValue));
    }

    /**
     * Retrieve list of jobs for the user based on search conditions in the request body and pagination information from the query paramter on the dedicated search end-point.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJobSearchListByPostSqlStr(requestParameters: GetJobSearchListByPostSqlStrRequest, initOverrides?: RequestInit): Promise<RespJobSearchAllAttributes> {
        const response = await this.getJobSearchListByPostSqlStrRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve status of a previously submitted job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJobStatusRaw(requestParameters: GetJobStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespGetJobStatus>> {
        if (requestParameters.jobUuid === null || requestParameters.jobUuid === undefined) {
            throw new runtime.RequiredError('jobUuid','Required parameter requestParameters.jobUuid was null or undefined when calling getJobStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/{jobUuid}/status`.replace(`{${"jobUuid"}}`, encodeURIComponent(String(requestParameters.jobUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespGetJobStatusFromJSON(jsonValue));
    }

    /**
     * Retrieve status of a previously submitted job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJobStatus(requestParameters: GetJobStatusRequest, initOverrides?: RequestInit): Promise<RespGetJobStatus> {
        const response = await this.getJobStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Resubmit request for of a job in JSON format.  
     */
    async getResubmitRequestJsonRaw(requestParameters: GetResubmitRequestJsonRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespGetResubmit>> {
        if (requestParameters.jobUuid === null || requestParameters.jobUuid === undefined) {
            throw new runtime.RequiredError('jobUuid','Required parameter requestParameters.jobUuid was null or undefined when calling getResubmitRequestJson.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/{jobUuid}/resubmit_request`.replace(`{${"jobUuid"}}`, encodeURIComponent(String(requestParameters.jobUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespGetResubmitFromJSON(jsonValue));
    }

    /**
     * Get Resubmit request for of a job in JSON format.  
     */
    async getResubmitRequestJson(requestParameters: GetResubmitRequestJsonRequest, initOverrides?: RequestInit): Promise<RespGetResubmit> {
        const response = await this.getResubmitRequestJsonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Hide a job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async hideJobRaw(requestParameters: HideJobRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespHideJob>> {
        if (requestParameters.jobUuid === null || requestParameters.jobUuid === undefined) {
            throw new runtime.RequiredError('jobUuid','Required parameter requestParameters.jobUuid was null or undefined when calling hideJob.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/{jobUuid}/hide`.replace(`{${"jobUuid"}}`, encodeURIComponent(String(requestParameters.jobUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespHideJobFromJSON(jsonValue));
    }

    /**
     * Hide a job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async hideJob(requestParameters: HideJobRequest, initOverrides?: RequestInit): Promise<RespHideJob> {
        const response = await this.hideJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resubmit a job for execution using the job\'s original parameters.  The main phases of job execution are:    - validate input   - check resource availability   - stage input files   - stage application code   - launch application   - monitor application   - archive application output  When a job is submitted its request payload is captured and available for resubmission using this API. The resubmitted job is assigned a new UUID and does not reference or have any special access to the original job\'s information once the orginal job\'s request is copied. The resubmitted job\'s execution can differ from the original job\'s if the application, system or other aspects of the execution environment have changed.
     */
    async resubmitJobRaw(requestParameters: ResubmitJobRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespSubmitJob>> {
        if (requestParameters.jobUuid === null || requestParameters.jobUuid === undefined) {
            throw new runtime.RequiredError('jobUuid','Required parameter requestParameters.jobUuid was null or undefined when calling resubmitJob.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/{jobUuid}/resubmit`.replace(`{${"jobUuid"}}`, encodeURIComponent(String(requestParameters.jobUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespSubmitJobFromJSON(jsonValue));
    }

    /**
     * Resubmit a job for execution using the job\'s original parameters.  The main phases of job execution are:    - validate input   - check resource availability   - stage input files   - stage application code   - launch application   - monitor application   - archive application output  When a job is submitted its request payload is captured and available for resubmission using this API. The resubmitted job is assigned a new UUID and does not reference or have any special access to the original job\'s information once the orginal job\'s request is copied. The resubmitted job\'s execution can differ from the original job\'s if the application, system or other aspects of the execution environment have changed.
     */
    async resubmitJob(requestParameters: ResubmitJobRequest, initOverrides?: RequestInit): Promise<RespSubmitJob> {
        const response = await this.resubmitJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send a user event to an active job. The job must be in the same tenant as the caller, but no other authorization is needed. If the job has terminated the request will be rejected. The caller must specify a payload of non-empty string data in the *eventData* field. The *eventDetail* field can be set to further qualify the type of user event, which is useful when filtering events. If not provided the *eventDetail* defaults to \'DEFAULT\'.  Subscribers that register interest in events of type JOB_USER_EVENT will receive a notification as a result of this call.
     */
    async sendEventRaw(requestParameters: SendEventRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespBasic>> {
        if (requestParameters.jobUuid === null || requestParameters.jobUuid === undefined) {
            throw new runtime.RequiredError('jobUuid','Required parameter requestParameters.jobUuid was null or undefined when calling sendEvent.');
        }

        if (requestParameters.reqUserEvent === null || requestParameters.reqUserEvent === undefined) {
            throw new runtime.RequiredError('reqUserEvent','Required parameter requestParameters.reqUserEvent was null or undefined when calling sendEvent.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/{jobUuid}/sendEvent`.replace(`{${"jobUuid"}}`, encodeURIComponent(String(requestParameters.jobUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqUserEventToJSON(requestParameters.reqUserEvent),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespBasicFromJSON(jsonValue));
    }

    /**
     * Send a user event to an active job. The job must be in the same tenant as the caller, but no other authorization is needed. If the job has terminated the request will be rejected. The caller must specify a payload of non-empty string data in the *eventData* field. The *eventDetail* field can be set to further qualify the type of user event, which is useful when filtering events. If not provided the *eventDetail* defaults to \'DEFAULT\'.  Subscribers that register interest in events of type JOB_USER_EVENT will receive a notification as a result of this call.
     */
    async sendEvent(requestParameters: SendEventRequest, initOverrides?: RequestInit): Promise<RespBasic> {
        const response = await this.sendEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submit a job for execution.  The main phases of job execution are:    - validate input   - check resource availability   - stage input files   - stage application code   - launch application   - monitor application   - archive application output  At a minimum, the job name, application ID and application version must be specified in the request payload. The optional parameters available in a job request provide great flexibility but must be considered in the context of the application and system definitions. The actual values used during job execution are a combination of the values in this request and those specified in the job\'s application and system definitions. It\'s often desirable to keep the submission request simple by specifying common values in these other two definitions. See the [Job Submission Request](https://tapis.readthedocs.io/en/latest/technical/jobs.html#the-job-submission-request) documentation for details.
     */
    async submitJobRaw(requestParameters: SubmitJobRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespSubmitJob>> {
        if (requestParameters.reqSubmitJob === null || requestParameters.reqSubmitJob === undefined) {
            throw new runtime.RequiredError('reqSubmitJob','Required parameter requestParameters.reqSubmitJob was null or undefined when calling submitJob.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/submit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqSubmitJobToJSON(requestParameters.reqSubmitJob),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespSubmitJobFromJSON(jsonValue));
    }

    /**
     * Submit a job for execution.  The main phases of job execution are:    - validate input   - check resource availability   - stage input files   - stage application code   - launch application   - monitor application   - archive application output  At a minimum, the job name, application ID and application version must be specified in the request payload. The optional parameters available in a job request provide great flexibility but must be considered in the context of the application and system definitions. The actual values used during job execution are a combination of the values in this request and those specified in the job\'s application and system definitions. It\'s often desirable to keep the submission request simple by specifying common values in these other two definitions. See the [Job Submission Request](https://tapis.readthedocs.io/en/latest/technical/jobs.html#the-job-submission-request) documentation for details.
     */
    async submitJob(requestParameters: SubmitJobRequest, initOverrides?: RequestInit): Promise<RespSubmitJob> {
        const response = await this.submitJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Un-hide a job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async unhideJobRaw(requestParameters: UnhideJobRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespHideJob>> {
        if (requestParameters.jobUuid === null || requestParameters.jobUuid === undefined) {
            throw new runtime.RequiredError('jobUuid','Required parameter requestParameters.jobUuid was null or undefined when calling unhideJob.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/{jobUuid}/unhide`.replace(`{${"jobUuid"}}`, encodeURIComponent(String(requestParameters.jobUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespHideJobFromJSON(jsonValue));
    }

    /**
     * Un-hide a job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async unhideJob(requestParameters: UnhideJobRequest, initOverrides?: RequestInit): Promise<RespHideJob> {
        const response = await this.unhideJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
