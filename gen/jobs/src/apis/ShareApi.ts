/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Jobs API
 * The Tapis Jobs API executes jobs on Tapis systems.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ReqShareJob,
    ReqShareJobFromJSON,
    ReqShareJobToJSON,
    RespBasic,
    RespBasicFromJSON,
    RespBasicToJSON,
    RespGetJobShareList,
    RespGetJobShareListFromJSON,
    RespGetJobShareListToJSON,
    RespName,
    RespNameFromJSON,
    RespNameToJSON,
    RespShareJob,
    RespShareJobFromJSON,
    RespShareJobToJSON,
    RespUnShareJob,
    RespUnShareJobFromJSON,
    RespUnShareJobToJSON,
} from '../models';

export interface DeleteJobShareRequest {
    jobUuid: string;
    user: string;
    pretty?: boolean;
}

export interface GetJobShareRequest {
    jobUuid: string;
    limit?: number;
    skip?: number;
    pretty?: boolean;
}

export interface ShareJobRequest {
    jobUuid: string;
    reqShareJob: ReqShareJob;
    pretty?: boolean;
}

/**
 * 
 */
export class ShareApi extends runtime.BaseAPI {

    /**
     * Delete all share information of a previously shared job for a specific user  The caller must be the job owner, creator or a tenant administrator.
     */
    async deleteJobShareRaw(requestParameters: DeleteJobShareRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespUnShareJob>> {
        if (requestParameters.jobUuid === null || requestParameters.jobUuid === undefined) {
            throw new runtime.RequiredError('jobUuid','Required parameter requestParameters.jobUuid was null or undefined when calling deleteJobShare.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling deleteJobShare.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/{jobUuid}/share/{user}`.replace(`{${"jobUuid"}}`, encodeURIComponent(String(requestParameters.jobUuid))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespUnShareJobFromJSON(jsonValue));
    }

    /**
     * Delete all share information of a previously shared job for a specific user  The caller must be the job owner, creator or a tenant administrator.
     */
    async deleteJobShare(requestParameters: DeleteJobShareRequest, initOverrides?: RequestInit): Promise<RespUnShareJob> {
        const response = await this.deleteJobShareRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve share information of a job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJobShareRaw(requestParameters: GetJobShareRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespGetJobShareList>> {
        if (requestParameters.jobUuid === null || requestParameters.jobUuid === undefined) {
            throw new runtime.RequiredError('jobUuid','Required parameter requestParameters.jobUuid was null or undefined when calling getJobShare.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/{jobUuid}/share`.replace(`{${"jobUuid"}}`, encodeURIComponent(String(requestParameters.jobUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespGetJobShareListFromJSON(jsonValue));
    }

    /**
     * Retrieve share information of a job by its UUID.  The caller must be the job owner, creator or a tenant administrator.
     */
    async getJobShare(requestParameters: GetJobShareRequest, initOverrides?: RequestInit): Promise<RespGetJobShareList> {
        const response = await this.getJobShareRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Share a job with a user of the tenant. The caller must be the job owner, creator or a tenant administrator.
     */
    async shareJobRaw(requestParameters: ShareJobRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespShareJob>> {
        if (requestParameters.jobUuid === null || requestParameters.jobUuid === undefined) {
            throw new runtime.RequiredError('jobUuid','Required parameter requestParameters.jobUuid was null or undefined when calling shareJob.');
        }

        if (requestParameters.reqShareJob === null || requestParameters.reqShareJob === undefined) {
            throw new runtime.RequiredError('reqShareJob','Required parameter requestParameters.reqShareJob was null or undefined when calling shareJob.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/jobs/{jobUuid}/share`.replace(`{${"jobUuid"}}`, encodeURIComponent(String(requestParameters.jobUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqShareJobToJSON(requestParameters.reqShareJob),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespShareJobFromJSON(jsonValue));
    }

    /**
     * Share a job with a user of the tenant. The caller must be the job owner, creator or a tenant administrator.
     */
    async shareJob(requestParameters: ShareJobRequest, initOverrides?: RequestInit): Promise<RespShareJob> {
        const response = await this.shareJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
