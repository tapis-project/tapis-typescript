/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Jobs API
 * The Tapis Jobs API executes jobs on Tapis systems.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface JobListDTO
 */
export interface JobListDTO {
    /**
     * 
     * @type {string}
     * @memberof JobListDTO
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof JobListDTO
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof JobListDTO
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof JobListDTO
     */
    appId?: string;
    /**
     * 
     * @type {Date}
     * @memberof JobListDTO
     */
    created?: Date;
    /**
     * 
     * @type {string}
     * @memberof JobListDTO
     */
    status?: JobListDTOStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof JobListDTO
     */
    condition?: JobListDTOConditionEnum;
    /**
     * 
     * @type {Date}
     * @memberof JobListDTO
     */
    remoteStarted?: Date;
    /**
     * 
     * @type {Date}
     * @memberof JobListDTO
     */
    ended?: Date;
    /**
     * 
     * @type {string}
     * @memberof JobListDTO
     */
    tenant?: string;
    /**
     * 
     * @type {string}
     * @memberof JobListDTO
     */
    execSystemId?: string;
    /**
     * 
     * @type {string}
     * @memberof JobListDTO
     */
    archiveSystemId?: string;
    /**
     * 
     * @type {string}
     * @memberof JobListDTO
     */
    appVersion?: string;
    /**
     * 
     * @type {Date}
     * @memberof JobListDTO
     */
    lastUpdated?: Date;
}

/**
* @export
* @enum {string}
*/
export enum JobListDTOStatusEnum {
    Pending = 'PENDING',
    ProcessingInputs = 'PROCESSING_INPUTS',
    StagingInputs = 'STAGING_INPUTS',
    StagingJob = 'STAGING_JOB',
    SubmittingJob = 'SUBMITTING_JOB',
    Queued = 'QUEUED',
    Running = 'RUNNING',
    Archiving = 'ARCHIVING',
    Blocked = 'BLOCKED',
    Paused = 'PAUSED',
    Finished = 'FINISHED',
    Cancelled = 'CANCELLED',
    Failed = 'FAILED'
}/**
* @export
* @enum {string}
*/
export enum JobListDTOConditionEnum {
    CancelledByUser = 'CANCELLED_BY_USER',
    JobArchivingFailed = 'JOB_ARCHIVING_FAILED',
    JobDatabaseError = 'JOB_DATABASE_ERROR',
    JobExecutionMonitoringError = 'JOB_EXECUTION_MONITORING_ERROR',
    JobExecutionMonitoringTimeout = 'JOB_EXECUTION_MONITORING_TIMEOUT',
    JobFilesServiceError = 'JOB_FILES_SERVICE_ERROR',
    JobInternalError = 'JOB_INTERNAL_ERROR',
    JobInvalidDefinition = 'JOB_INVALID_DEFINITION',
    JobLaunchFailure = 'JOB_LAUNCH_FAILURE',
    JobQueueMonitoringError = 'JOB_QUEUE_MONITORING_ERROR',
    JobRecoveryFailure = 'JOB_RECOVERY_FAILURE',
    JobRecoveryTimeout = 'JOB_RECOVERY_TIMEOUT',
    JobRemoteAccessError = 'JOB_REMOTE_ACCESS_ERROR',
    JobRemoteOutcomeError = 'JOB_REMOTE_OUTCOME_ERROR',
    JobUnableToStageInputs = 'JOB_UNABLE_TO_STAGE_INPUTS',
    JobUnableToStageJob = 'JOB_UNABLE_TO_STAGE_JOB',
    JobTransferFailedOrCancelled = 'JOB_TRANSFER_FAILED_OR_CANCELLED',
    JobTransferMonitoringTimeout = 'JOB_TRANSFER_MONITORING_TIMEOUT',
    NormalCompletion = 'NORMAL_COMPLETION',
    SchedulerCancelled = 'SCHEDULER_CANCELLED',
    SchedulerDeadline = 'SCHEDULER_DEADLINE',
    SchedulerOutOfMemory = 'SCHEDULER_OUT_OF_MEMORY',
    SchedulerStopped = 'SCHEDULER_STOPPED',
    SchedulerTimeout = 'SCHEDULER_TIMEOUT',
    SchedulerTerminated = 'SCHEDULER_TERMINATED'
}

export function JobListDTOFromJSON(json: any): JobListDTO {
    return JobListDTOFromJSONTyped(json, false);
}

export function JobListDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): JobListDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uuid': !exists(json, 'uuid') ? undefined : json['uuid'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'owner': !exists(json, 'owner') ? undefined : json['owner'],
        'appId': !exists(json, 'appId') ? undefined : json['appId'],
        'created': !exists(json, 'created') ? undefined : (new Date(json['created'])),
        'status': !exists(json, 'status') ? undefined : json['status'],
        'condition': !exists(json, 'condition') ? undefined : json['condition'],
        'remoteStarted': !exists(json, 'remoteStarted') ? undefined : (new Date(json['remoteStarted'])),
        'ended': !exists(json, 'ended') ? undefined : (new Date(json['ended'])),
        'tenant': !exists(json, 'tenant') ? undefined : json['tenant'],
        'execSystemId': !exists(json, 'execSystemId') ? undefined : json['execSystemId'],
        'archiveSystemId': !exists(json, 'archiveSystemId') ? undefined : json['archiveSystemId'],
        'appVersion': !exists(json, 'appVersion') ? undefined : json['appVersion'],
        'lastUpdated': !exists(json, 'lastUpdated') ? undefined : (new Date(json['lastUpdated'])),
    };
}

export function JobListDTOToJSON(value?: JobListDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uuid': value.uuid,
        'name': value.name,
        'owner': value.owner,
        'appId': value.appId,
        'created': value.created === undefined ? undefined : (value.created.toISOString()),
        'status': value.status,
        'condition': value.condition,
        'remoteStarted': value.remoteStarted === undefined ? undefined : (value.remoteStarted.toISOString()),
        'ended': value.ended === undefined ? undefined : (value.ended.toISOString()),
        'tenant': value.tenant,
        'execSystemId': value.execSystemId,
        'archiveSystemId': value.archiveSystemId,
        'appVersion': value.appVersion,
        'lastUpdated': value.lastUpdated === undefined ? undefined : (value.lastUpdated.toISOString()),
    };
}

