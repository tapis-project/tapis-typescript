/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Files API
 * The Tapis Files API provides for management of file resources on Tapis systems
 *
 * The version of the OpenAPI document: 1.3.6
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PostIt
 */
export interface PostIt {
    /**
     * The unique ID of the PostIt.
     * @type {string}
     * @memberof PostIt
     */
    postitId?: string;
    /**
     * The ID of the system where the file pointed to by the PostIt resides.
     * @type {string}
     * @memberof PostIt
     */
    systemId?: string;
    /**
     * The owner of the PostIt.
     * @type {string}
     * @memberof PostIt
     */
    owner?: string;
    /**
     * the tenant that tthe PostIt belongs to.
     * @type {string}
     * @memberof PostIt
     */
    tenantId?: string;
    /**
     * Path relative to the system *rootDir*
     * @type {string}
     * @memberof PostIt
     */
    path?: string;
    /**
     * The number of times the PostIt may be redeemed.  This number minus *uses* is the number of uses remaining.
     * @type {number}
     * @memberof PostIt
     */
    allowedUses?: number;
    /**
     * The number of times the PostIt has already been retrieved.
     * @type {number}
     * @memberof PostIt
     */
    timesUsed?: number;
    /**
     * Authenticated user from the JWT (may be different than OBO user).
     * @type {string}
     * @memberof PostIt
     */
    jwtUser?: string;
    /**
     * Tenant of authenticated user from the JWT (may be different than OBO user's tenant).
     * @type {string}
     * @memberof PostIt
     */
    jwtTenantId?: string;
    /**
     * The url to use to retrieve the file pointed to by the PostIt.
     * @type {string}
     * @memberof PostIt
     */
    redeemUrl?: string;
    /**
     * The expiration date/time of the PostIt.
     * @type {Date}
     * @memberof PostIt
     */
    expiration?: Date;
    /**
     * Creation timestamp in UTC
     * @type {Date}
     * @memberof PostIt
     */
    created?: Date;
    /**
     * Last update timestamp in UTC
     * @type {Date}
     * @memberof PostIt
     */
    updated?: Date;
}

export function PostItFromJSON(json: any): PostIt {
    return PostItFromJSONTyped(json, false);
}

export function PostItFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostIt {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'postitId': !exists(json, 'postitId') ? undefined : json['postitId'],
        'systemId': !exists(json, 'systemId') ? undefined : json['systemId'],
        'owner': !exists(json, 'owner') ? undefined : json['owner'],
        'tenantId': !exists(json, 'tenantId') ? undefined : json['tenantId'],
        'path': !exists(json, 'path') ? undefined : json['path'],
        'allowedUses': !exists(json, 'allowedUses') ? undefined : json['allowedUses'],
        'timesUsed': !exists(json, 'timesUsed') ? undefined : json['timesUsed'],
        'jwtUser': !exists(json, 'jwtUser') ? undefined : json['jwtUser'],
        'jwtTenantId': !exists(json, 'jwtTenantId') ? undefined : json['jwtTenantId'],
        'redeemUrl': !exists(json, 'redeemUrl') ? undefined : json['redeemUrl'],
        'expiration': !exists(json, 'expiration') ? undefined : (new Date(json['expiration'])),
        'created': !exists(json, 'created') ? undefined : (new Date(json['created'])),
        'updated': !exists(json, 'updated') ? undefined : (new Date(json['updated'])),
    };
}

export function PostItToJSON(value?: PostIt | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'postitId': value.postitId,
        'systemId': value.systemId,
        'owner': value.owner,
        'tenantId': value.tenantId,
        'path': value.path,
        'allowedUses': value.allowedUses,
        'timesUsed': value.timesUsed,
        'jwtUser': value.jwtUser,
        'jwtTenantId': value.jwtTenantId,
        'redeemUrl': value.redeemUrl,
        'expiration': value.expiration === undefined ? undefined : (value.expiration.toISOString()),
        'created': value.created === undefined ? undefined : (value.created.toISOString()),
        'updated': value.updated === undefined ? undefined : (value.updated.toISOString()),
    };
}

