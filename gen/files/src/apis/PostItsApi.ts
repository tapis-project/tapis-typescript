/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Files API
 * The Tapis Files API provides for management of file resources on Tapis systems
 *
 * The version of the OpenAPI document: 1.3.6
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreatePostItRequest,
    CreatePostItRequestFromJSON,
    CreatePostItRequestToJSON,
    FileStringResponse,
    FileStringResponseFromJSON,
    FileStringResponseToJSON,
    ListTypeEnum,
    ListTypeEnumFromJSON,
    ListTypeEnumToJSON,
    PostItListResponse,
    PostItListResponseFromJSON,
    PostItListResponseToJSON,
    PostItResponse,
    PostItResponseFromJSON,
    PostItResponseToJSON,
    RespChangeCount,
    RespChangeCountFromJSON,
    RespChangeCountToJSON,
    UpdatePostItRequest,
    UpdatePostItRequestFromJSON,
    UpdatePostItRequestToJSON,
} from '../models';

export interface CreatePostItOperationRequest {
    systemId: string;
    path: string;
    createPostItRequest: CreatePostItRequest;
}

export interface DeletePostItRequest {
    postitId: string;
}

export interface GetPostItRequest {
    postitId: string;
}

export interface ListPostItsRequest {
    listType?: ListTypeEnum;
    limit?: number;
    orderBy?: string;
    skip?: number;
    startAfter?: string;
    select?: string;
}

export interface RedeemPostItRequest {
    postitId: string;
    zip?: boolean;
    download?: boolean;
}

export interface UpdatePostItOperationRequest {
    postitId: string;
    updatePostItRequest: UpdatePostItRequest;
}

/**
 * 
 */
export class PostItsApi extends runtime.BaseAPI {

    /**
     * Create a PostIt.  The PostIt will grant access to a file url. The newly created PostIt can be redeemed by anyone without  further authorization.  This will nearly identical to calling the files service getContents endpoint. 
     * Create a PostIt
     */
    async createPostItRaw(requestParameters: CreatePostItOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PostItResponse>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling createPostIt.');
        }

        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling createPostIt.');
        }

        if (requestParameters.createPostItRequest === null || requestParameters.createPostItRequest === undefined) {
            throw new runtime.RequiredError('createPostItRequest','Required parameter requestParameters.createPostItRequest was null or undefined when calling createPostIt.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/files/postits/{systemId}/{path}`.replace(`{${"systemId"}}`, encodeURIComponent(String(requestParameters.systemId))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePostItRequestToJSON(requestParameters.createPostItRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostItResponseFromJSON(jsonValue));
    }

    /**
     * Create a PostIt.  The PostIt will grant access to a file url. The newly created PostIt can be redeemed by anyone without  further authorization.  This will nearly identical to calling the files service getContents endpoint. 
     * Create a PostIt
     */
    async createPostIt(requestParameters: CreatePostItOperationRequest, initOverrides?: RequestInit): Promise<PostItResponse> {
        const response = await this.createPostItRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a PostIt.
     * Delete a PostIt
     */
    async deletePostItRaw(requestParameters: DeletePostItRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespChangeCount>> {
        if (requestParameters.postitId === null || requestParameters.postitId === undefined) {
            throw new runtime.RequiredError('postitId','Required parameter requestParameters.postitId was null or undefined when calling deletePostIt.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/files/postits/{postitId}`.replace(`{${"postitId"}}`, encodeURIComponent(String(requestParameters.postitId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespChangeCountFromJSON(jsonValue));
    }

    /**
     * Delete a PostIt.
     * Delete a PostIt
     */
    async deletePostIt(requestParameters: DeletePostItRequest, initOverrides?: RequestInit): Promise<RespChangeCount> {
        const response = await this.deletePostItRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single PostIt.  This does not redeem the PostIt.
     * Get PostIt.
     */
    async getPostItRaw(requestParameters: GetPostItRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PostItResponse>> {
        if (requestParameters.postitId === null || requestParameters.postitId === undefined) {
            throw new runtime.RequiredError('postitId','Required parameter requestParameters.postitId was null or undefined when calling getPostIt.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/files/postits/{postitId}`.replace(`{${"postitId"}}`, encodeURIComponent(String(requestParameters.postitId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostItResponseFromJSON(jsonValue));
    }

    /**
     * Get a single PostIt.  This does not redeem the PostIt.
     * Get PostIt.
     */
    async getPostIt(requestParameters: GetPostItRequest, initOverrides?: RequestInit): Promise<PostItResponse> {
        const response = await this.getPostItRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all PostIts.  Use *listType* and *select* query  parameters to limit results. Query parameter *listType* allows for filtering  results based on authorization. Options for *listType* are   - *OWNED* Include only items owned by requester (Default)   - *ALL* Include all items requester is authorized to view. (Tenant admins can view all PostIts in their tenant). 
     * List PostIts.
     */
    async listPostItsRaw(requestParameters: ListPostItsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PostItListResponse>> {
        const queryParameters: any = {};

        if (requestParameters.listType !== undefined) {
            queryParameters['listType'] = requestParameters.listType;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.startAfter !== undefined) {
            queryParameters['startAfter'] = requestParameters.startAfter;
        }

        if (requestParameters.select !== undefined) {
            queryParameters['select'] = requestParameters.select;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/files/postits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostItListResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all PostIts.  Use *listType* and *select* query  parameters to limit results. Query parameter *listType* allows for filtering  results based on authorization. Options for *listType* are   - *OWNED* Include only items owned by requester (Default)   - *ALL* Include all items requester is authorized to view. (Tenant admins can view all PostIts in their tenant). 
     * List PostIts.
     */
    async listPostIts(requestParameters: ListPostItsRequest, initOverrides?: RequestInit): Promise<PostItListResponse> {
        const response = await this.listPostItsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Redeem a PostIt.  This will return the file that is pointed to by the PostIt.  No authentication is required. If the *zip* query param is provided it controls if the content is zipped or not.  If zip is not provided, it defaults to false unless the path pointed to by the PostIt is a directory.  In the case of a directory, the default is zip=true. Directories must by redeemed in zipped format, so either accept the default, or specify zip=true.
     * Redeem PostIt.
     */
    async redeemPostItRaw(requestParameters: RedeemPostItRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.postitId === null || requestParameters.postitId === undefined) {
            throw new runtime.RequiredError('postitId','Required parameter requestParameters.postitId was null or undefined when calling redeemPostIt.');
        }

        const queryParameters: any = {};

        if (requestParameters.zip !== undefined) {
            queryParameters['zip'] = requestParameters.zip;
        }

        if (requestParameters.download !== undefined) {
            queryParameters['download'] = requestParameters.download;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/files/postits/redeem/{postitId}`.replace(`{${"postitId"}}`, encodeURIComponent(String(requestParameters.postitId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Redeem a PostIt.  This will return the file that is pointed to by the PostIt.  No authentication is required. If the *zip* query param is provided it controls if the content is zipped or not.  If zip is not provided, it defaults to false unless the path pointed to by the PostIt is a directory.  In the case of a directory, the default is zip=true. Directories must by redeemed in zipped format, so either accept the default, or specify zip=true.
     * Redeem PostIt.
     */
    async redeemPostIt(requestParameters: RedeemPostItRequest, initOverrides?: RequestInit): Promise<void> {
        await this.redeemPostItRaw(requestParameters, initOverrides);
    }

    /**
     * Update selected fields of a PostIt.  
     * Modify a PostIt
     */
    async updatePostItRaw(requestParameters: UpdatePostItOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PostItResponse>> {
        if (requestParameters.postitId === null || requestParameters.postitId === undefined) {
            throw new runtime.RequiredError('postitId','Required parameter requestParameters.postitId was null or undefined when calling updatePostIt.');
        }

        if (requestParameters.updatePostItRequest === null || requestParameters.updatePostItRequest === undefined) {
            throw new runtime.RequiredError('updatePostItRequest','Required parameter requestParameters.updatePostItRequest was null or undefined when calling updatePostIt.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v3/files/postits/{postitId}`.replace(`{${"postitId"}}`, encodeURIComponent(String(requestParameters.postitId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePostItRequestToJSON(requestParameters.updatePostItRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostItResponseFromJSON(jsonValue));
    }

    /**
     * Update selected fields of a PostIt.  
     * Modify a PostIt
     */
    async updatePostIt(requestParameters: UpdatePostItOperationRequest, initOverrides?: RequestInit): Promise<PostItResponse> {
        const response = await this.updatePostItRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
