/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Machine Learning Hub - Datasets API
 * The Tapis Machine Learning Hub - Datasets API provides users access to datasets from HuggingFace within the Tapis framework.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    RespDataset,
    RespDatasetFromJSON,
    RespDatasetToJSON,
    RespDatasetCard,
    RespDatasetCardFromJSON,
    RespDatasetCardToJSON,
    RespDatasetDownload,
    RespDatasetDownloadFromJSON,
    RespDatasetDownloadToJSON,
    RespDatasetsObject,
    RespDatasetsObjectFromJSON,
    RespDatasetsObjectToJSON,
    RespError,
    RespErrorFromJSON,
    RespErrorToJSON,
} from '../models';

export interface DownloadDatasetRequest {
    datasetId: string;
}

export interface GetDatasetRequest {
    datasetId: string;
}

export interface GetDatasetCardRequest {
    datasetId: string;
}

export interface ListDatasetsByAuthorRequest {
    authorId: string;
}

export interface ListDatasetsByLanguageRequest {
    languageName: string;
}

export interface ListDatasetsByQueryRequest {
    query: string;
}

export interface ListDatasetsBySizeCategoryRequest {
    sizeCategory: string;
}

export interface ListDatasetsByTaskRequest {
    taskType: string;
}

/**
 * 
 */
export class DatasetsApi extends runtime.BaseAPI {

    /**
     * Generates download links for dataset repository files.
     */
    async downloadDatasetRaw(requestParameters: DownloadDatasetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespDatasetDownload>> {
        if (requestParameters.datasetId === null || requestParameters.datasetId === undefined) {
            throw new runtime.RequiredError('datasetId','Required parameter requestParameters.datasetId was null or undefined when calling downloadDataset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/ml-hub/download_dataset/{datasetId}`.replace(`{${"datasetId"}}`, encodeURIComponent(String(requestParameters.datasetId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespDatasetDownloadFromJSON(jsonValue));
    }

    /**
     * Generates download links for dataset repository files.
     */
    async downloadDataset(requestParameters: DownloadDatasetRequest, initOverrides?: RequestInit): Promise<RespDatasetDownload> {
        const response = await this.downloadDatasetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve information for a dataset given the datasetId.
     */
    async getDatasetRaw(requestParameters: GetDatasetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespDataset>> {
        if (requestParameters.datasetId === null || requestParameters.datasetId === undefined) {
            throw new runtime.RequiredError('datasetId','Required parameter requestParameters.datasetId was null or undefined when calling getDataset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/ml-hub/datasets/{datasetId}`.replace(`{${"datasetId"}}`, encodeURIComponent(String(requestParameters.datasetId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespDatasetFromJSON(jsonValue));
    }

    /**
     * Retrieve information for a dataset given the datasetId.
     */
    async getDataset(requestParameters: GetDatasetRequest, initOverrides?: RequestInit): Promise<RespDataset> {
        const response = await this.getDatasetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch dataset card information.
     */
    async getDatasetCardRaw(requestParameters: GetDatasetCardRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespDatasetCard>> {
        if (requestParameters.datasetId === null || requestParameters.datasetId === undefined) {
            throw new runtime.RequiredError('datasetId','Required parameter requestParameters.datasetId was null or undefined when calling getDatasetCard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/ml-hub/dataset_card/{datasetId}`.replace(`{${"datasetId"}}`, encodeURIComponent(String(requestParameters.datasetId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespDatasetCardFromJSON(jsonValue));
    }

    /**
     * Fetch dataset card information.
     */
    async getDatasetCard(requestParameters: GetDatasetCardRequest, initOverrides?: RequestInit): Promise<RespDatasetCard> {
        const response = await this.getDatasetCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve information on 100 most downloaded datasets.
     */
    async listDatasetsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespDatasetsObject>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/ml-hub/datasets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespDatasetsObjectFromJSON(jsonValue));
    }

    /**
     * Retrieve information on 100 most downloaded datasets.
     */
    async listDatasets(initOverrides?: RequestInit): Promise<RespDatasetsObject> {
        const response = await this.listDatasetsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve information on datasets created by specified authorId. authorId is case-sensitive.
     */
    async listDatasetsByAuthorRaw(requestParameters: ListDatasetsByAuthorRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespDatasetsObject>> {
        if (requestParameters.authorId === null || requestParameters.authorId === undefined) {
            throw new runtime.RequiredError('authorId','Required parameter requestParameters.authorId was null or undefined when calling listDatasetsByAuthor.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/ml-hub/datasets/authors/{authorId}`.replace(`{${"authorId"}}`, encodeURIComponent(String(requestParameters.authorId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespDatasetsObjectFromJSON(jsonValue));
    }

    /**
     * Retrieve information on datasets created by specified authorId. authorId is case-sensitive.
     */
    async listDatasetsByAuthor(requestParameters: ListDatasetsByAuthorRequest, initOverrides?: RequestInit): Promise<RespDatasetsObject> {
        const response = await this.listDatasetsByAuthorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve information on top 100 most downloaded datasets filtered by language.
     */
    async listDatasetsByLanguageRaw(requestParameters: ListDatasetsByLanguageRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespDatasetsObject>> {
        if (requestParameters.languageName === null || requestParameters.languageName === undefined) {
            throw new runtime.RequiredError('languageName','Required parameter requestParameters.languageName was null or undefined when calling listDatasetsByLanguage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/ml-hub/datasets/languages/{languageName}`.replace(`{${"languageName"}}`, encodeURIComponent(String(requestParameters.languageName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespDatasetsObjectFromJSON(jsonValue));
    }

    /**
     * Retrieve information on top 100 most downloaded datasets filtered by language.
     */
    async listDatasetsByLanguage(requestParameters: ListDatasetsByLanguageRequest, initOverrides?: RequestInit): Promise<RespDatasetsObject> {
        const response = await this.listDatasetsByLanguageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve information on top 100 most downloaded datasets filtered by query.
     */
    async listDatasetsByQueryRaw(requestParameters: ListDatasetsByQueryRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespDatasetsObject>> {
        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling listDatasetsByQuery.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/ml-hub/datasets/search/{query}`.replace(`{${"query"}}`, encodeURIComponent(String(requestParameters.query))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespDatasetsObjectFromJSON(jsonValue));
    }

    /**
     * Retrieve information on top 100 most downloaded datasets filtered by query.
     */
    async listDatasetsByQuery(requestParameters: ListDatasetsByQueryRequest, initOverrides?: RequestInit): Promise<RespDatasetsObject> {
        const response = await this.listDatasetsByQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve information on top 100 most downloaded datasets filtered by their size category.
     */
    async listDatasetsBySizeCategoryRaw(requestParameters: ListDatasetsBySizeCategoryRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespDatasetsObject>> {
        if (requestParameters.sizeCategory === null || requestParameters.sizeCategory === undefined) {
            throw new runtime.RequiredError('sizeCategory','Required parameter requestParameters.sizeCategory was null or undefined when calling listDatasetsBySizeCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/ml-hub/datasets/size-categories/{sizeCategory}`.replace(`{${"sizeCategory"}}`, encodeURIComponent(String(requestParameters.sizeCategory))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespDatasetsObjectFromJSON(jsonValue));
    }

    /**
     * Retrieve information on top 100 most downloaded datasets filtered by their size category.
     */
    async listDatasetsBySizeCategory(requestParameters: ListDatasetsBySizeCategoryRequest, initOverrides?: RequestInit): Promise<RespDatasetsObject> {
        const response = await this.listDatasetsBySizeCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve information on top 100 most downloaded datasets filtered by taskType. taskType is case-sensitive.
     */
    async listDatasetsByTaskRaw(requestParameters: ListDatasetsByTaskRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespDatasetsObject>> {
        if (requestParameters.taskType === null || requestParameters.taskType === undefined) {
            throw new runtime.RequiredError('taskType','Required parameter requestParameters.taskType was null or undefined when calling listDatasetsByTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TAPIS-TOKEN"] = this.configuration.apiKey("X-TAPIS-TOKEN"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/ml-hub/datasets/tasks/{taskType}`.replace(`{${"taskType"}}`, encodeURIComponent(String(requestParameters.taskType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespDatasetsObjectFromJSON(jsonValue));
    }

    /**
     * Retrieve information on top 100 most downloaded datasets filtered by taskType. taskType is case-sensitive.
     */
    async listDatasetsByTask(requestParameters: ListDatasetsByTaskRequest, initOverrides?: RequestInit): Promise<RespDatasetsObject> {
        const response = await this.listDatasetsByTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
