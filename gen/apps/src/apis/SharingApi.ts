/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Applications API
 * The Tapis Applications API provides for management of Tapis applications including permissions.
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ReqShareUpdate,
    ReqShareUpdateFromJSON,
    ReqShareUpdateToJSON,
    RespBasic,
    RespBasicFromJSON,
    RespBasicToJSON,
    RespShareInfo,
    RespShareInfoFromJSON,
    RespShareInfoToJSON,
} from '../models';

export interface GetShareInfoRequest {
    appId: string;
}

export interface ShareAppRequest {
    appId: string;
    reqShareUpdate: ReqShareUpdate;
}

export interface ShareAppPublicRequest {
    appId: string;
}

export interface UnShareAppRequest {
    appId: string;
    reqShareUpdate: ReqShareUpdate;
}

export interface UnShareAppPublicRequest {
    appId: string;
}

/**
 * 
 */
export class SharingApi extends runtime.BaseAPI {

    /**
     * Retrieve all sharing information for an app. This includes all users with whom the app has been shared and whether or not the app has been made publicly available. 
     * Retrieve all sharing information for an app
     */
    async getShareInfoRaw(requestParameters: GetShareInfoRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespShareInfo>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getShareInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/apps/share/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespShareInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve all sharing information for an app. This includes all users with whom the app has been shared and whether or not the app has been made publicly available. 
     * Retrieve all sharing information for an app
     */
    async getShareInfo(requestParameters: GetShareInfoRequest, initOverrides?: RequestInit): Promise<RespShareInfo> {
        const response = await this.getShareInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or update sharing information for an app. The app will be shared with the list of users provided in the request body. Requester must be owner of the app. 
     * Share an app with one or more users.
     */
    async shareAppRaw(requestParameters: ShareAppRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespBasic>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling shareApp.');
        }

        if (requestParameters.reqShareUpdate === null || requestParameters.reqShareUpdate === undefined) {
            throw new runtime.RequiredError('reqShareUpdate','Required parameter requestParameters.reqShareUpdate was null or undefined when calling shareApp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/apps/share/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqShareUpdateToJSON(requestParameters.reqShareUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespBasicFromJSON(jsonValue));
    }

    /**
     * Create or update sharing information for an app. The app will be shared with the list of users provided in the request body. Requester must be owner of the app. 
     * Share an app with one or more users.
     */
    async shareApp(requestParameters: ShareAppRequest, initOverrides?: RequestInit): Promise<RespBasic> {
        const response = await this.shareAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Share an app with all users in the tenant. Requester must be owner of the app. 
     * Share an app publicly with all users in the tenant.
     */
    async shareAppPublicRaw(requestParameters: ShareAppPublicRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespBasic>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling shareAppPublic.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/apps/share_public/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespBasicFromJSON(jsonValue));
    }

    /**
     * Share an app with all users in the tenant. Requester must be owner of the app. 
     * Share an app publicly with all users in the tenant.
     */
    async shareAppPublic(requestParameters: ShareAppPublicRequest, initOverrides?: RequestInit): Promise<RespBasic> {
        const response = await this.shareAppPublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or update sharing information for an app. The app will be unshared with the list of users provided in the request body. Requester must be owner of the app. 
     * Unshare an app with one or more users.
     */
    async unShareAppRaw(requestParameters: UnShareAppRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespBasic>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling unShareApp.');
        }

        if (requestParameters.reqShareUpdate === null || requestParameters.reqShareUpdate === undefined) {
            throw new runtime.RequiredError('reqShareUpdate','Required parameter requestParameters.reqShareUpdate was null or undefined when calling unShareApp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/apps/unshare/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqShareUpdateToJSON(requestParameters.reqShareUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespBasicFromJSON(jsonValue));
    }

    /**
     * Create or update sharing information for an app. The app will be unshared with the list of users provided in the request body. Requester must be owner of the app. 
     * Unshare an app with one or more users.
     */
    async unShareApp(requestParameters: UnShareAppRequest, initOverrides?: RequestInit): Promise<RespBasic> {
        const response = await this.unShareAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove public sharing for an app. Requester must be owner of the app. 
     * Remove public access for an app.
     */
    async unShareAppPublicRaw(requestParameters: UnShareAppPublicRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespBasic>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling unShareAppPublic.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/apps/unshare_public/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespBasicFromJSON(jsonValue));
    }

    /**
     * Remove public sharing for an app. Requester must be owner of the app. 
     * Remove public access for an app.
     */
    async unShareAppPublic(requestParameters: UnShareAppPublicRequest, initOverrides?: RequestInit): Promise<RespBasic> {
        const response = await this.unShareAppPublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
