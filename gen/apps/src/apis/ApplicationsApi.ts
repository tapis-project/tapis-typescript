/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Applications API
 * The Tapis Applications API provides for management of Tapis applications including permissions.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ReqCreateApp,
    ReqCreateAppFromJSON,
    ReqCreateAppToJSON,
    ReqSearchApps,
    ReqSearchAppsFromJSON,
    ReqSearchAppsToJSON,
    ReqUpdateApp,
    ReqUpdateAppFromJSON,
    ReqUpdateAppToJSON,
    RespApp,
    RespAppFromJSON,
    RespAppToJSON,
    RespApps,
    RespAppsFromJSON,
    RespAppsToJSON,
    RespBasic,
    RespBasicFromJSON,
    RespBasicToJSON,
    RespBoolean,
    RespBooleanFromJSON,
    RespBooleanToJSON,
    RespChangeCount,
    RespChangeCountFromJSON,
    RespChangeCountToJSON,
    RespResourceUrl,
    RespResourceUrlFromJSON,
    RespResourceUrlToJSON,
} from '../models';

export interface ChangeAppOwnerRequest {
    appId: string;
    userName: string;
}

export interface CreateAppVersionRequest {
    reqCreateApp: ReqCreateApp;
}

export interface DeleteAppRequest {
    appId: string;
}

export interface DisableAppRequest {
    appId: string;
}

export interface EnableAppRequest {
    appId: string;
}

export interface GetAppRequest {
    appId: string;
    appVersion: string;
    requireExecPerm?: boolean;
    select?: string;
}

export interface GetAppLatestVersionRequest {
    appId: string;
    requireExecPerm?: boolean;
    select?: string;
}

export interface GetAppsRequest {
    search?: string;
    limit?: number;
    orderBy?: string;
    skip?: number;
    startAfter?: string;
    computeTotal?: boolean;
    select?: string;
    showDeleted?: boolean;
}

export interface IsEnabledRequest {
    appId: string;
}

export interface SearchAppsQueryParametersRequest {
    limit?: number;
    orderBy?: string;
    skip?: number;
    startAfter?: string;
    computeTotal?: boolean;
    select?: string;
}

export interface SearchAppsRequestBodyRequest {
    reqSearchApps: ReqSearchApps;
    limit?: number;
    orderBy?: string;
    skip?: number;
    startAfter?: string;
    computeTotal?: boolean;
    select?: string;
}

export interface UndeleteAppRequest {
    appId: string;
}

export interface UpdateAppRequest {
    appId: string;
    appVersion: string;
    reqUpdateApp: ReqUpdateApp;
}

/**
 * 
 */
export class ApplicationsApi extends runtime.BaseAPI {

    /**
     * Change owner of an application. Applies to all versions.
     * Change application owner
     */
    async changeAppOwnerRaw(requestParameters: ChangeAppOwnerRequest): Promise<runtime.ApiResponse<RespChangeCount>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling changeAppOwner.');
        }

        if (requestParameters.userName === null || requestParameters.userName === undefined) {
            throw new runtime.RequiredError('userName','Required parameter requestParameters.userName was null or undefined when calling changeAppOwner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/apps/{appId}/changeOwner/{userName}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"userName"}}`, encodeURIComponent(String(requestParameters.userName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespChangeCountFromJSON(jsonValue));
    }

    /**
     * Change owner of an application. Applies to all versions.
     * Change application owner
     */
    async changeAppOwner(requestParameters: ChangeAppOwnerRequest): Promise<RespChangeCount> {
        const response = await this.changeAppOwnerRaw(requestParameters);
        return await response.value();
    }

    /**
     *  Create an application using a request body. App id+version must be unique within tenant and can be composed of alphanumeric characters and the following special characters [-._~]. Id must begin with an alphabetic character and can be no more than 80 characters in length.  Note that certain attributes (such as tenant) are allowed but ignored so that the JSON returned by a GET may be modified and used in a POST or PUT to create or update an application. The attributes that are allowed but ignored are    - tenant   - uuid   - deleted   - created   - updated  In addition for a PUT operation the following non-updatable attributes are allowed but ignored    - id   - appType   - owner   - enabled 
     * Create a new version of an application
     */
    async createAppVersionRaw(requestParameters: CreateAppVersionRequest): Promise<runtime.ApiResponse<RespResourceUrl>> {
        if (requestParameters.reqCreateApp === null || requestParameters.reqCreateApp === undefined) {
            throw new runtime.RequiredError('reqCreateApp','Required parameter requestParameters.reqCreateApp was null or undefined when calling createAppVersion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/apps`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateAppToJSON(requestParameters.reqCreateApp),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespResourceUrlFromJSON(jsonValue));
    }

    /**
     *  Create an application using a request body. App id+version must be unique within tenant and can be composed of alphanumeric characters and the following special characters [-._~]. Id must begin with an alphabetic character and can be no more than 80 characters in length.  Note that certain attributes (such as tenant) are allowed but ignored so that the JSON returned by a GET may be modified and used in a POST or PUT to create or update an application. The attributes that are allowed but ignored are    - tenant   - uuid   - deleted   - created   - updated  In addition for a PUT operation the following non-updatable attributes are allowed but ignored    - id   - appType   - owner   - enabled 
     * Create a new version of an application
     */
    async createAppVersion(requestParameters: CreateAppVersionRequest): Promise<RespResourceUrl> {
        const response = await this.createAppVersionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Mark an application as deleted. Application will not appear in queries unless explicitly requested.
     * Mark an application as deleted
     */
    async deleteAppRaw(requestParameters: DeleteAppRequest): Promise<runtime.ApiResponse<RespChangeCount>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling deleteApp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/apps/{appId}/delete`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespChangeCountFromJSON(jsonValue));
    }

    /**
     * Mark an application as deleted. Application will not appear in queries unless explicitly requested.
     * Mark an application as deleted
     */
    async deleteApp(requestParameters: DeleteAppRequest): Promise<RespChangeCount> {
        const response = await this.deleteAppRaw(requestParameters);
        return await response.value();
    }

    /**
     * Mark an application unavailable for use. Applies to all versions.
     * Mark an application unavailabe for use
     */
    async disableAppRaw(requestParameters: DisableAppRequest): Promise<runtime.ApiResponse<RespChangeCount>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling disableApp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/apps/{appId}/disable`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespChangeCountFromJSON(jsonValue));
    }

    /**
     * Mark an application unavailable for use. Applies to all versions.
     * Mark an application unavailabe for use
     */
    async disableApp(requestParameters: DisableAppRequest): Promise<RespChangeCount> {
        const response = await this.disableAppRaw(requestParameters);
        return await response.value();
    }

    /**
     * Mark an application available for use. Applies to all versions.
     * Mark an application availabe for use
     */
    async enableAppRaw(requestParameters: EnableAppRequest): Promise<runtime.ApiResponse<RespChangeCount>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling enableApp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/apps/{appId}/enable`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespChangeCountFromJSON(jsonValue));
    }

    /**
     * Mark an application available for use. Applies to all versions.
     * Mark an application availabe for use
     */
    async enableApp(requestParameters: EnableAppRequest): Promise<RespChangeCount> {
        const response = await this.enableAppRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve information for an application given the application Id and version.
     * Retrieve details for specific version of an application
     */
    async getAppRaw(requestParameters: GetAppRequest): Promise<runtime.ApiResponse<RespApp>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getApp.');
        }

        if (requestParameters.appVersion === null || requestParameters.appVersion === undefined) {
            throw new runtime.RequiredError('appVersion','Required parameter requestParameters.appVersion was null or undefined when calling getApp.');
        }

        const queryParameters: any = {};

        if (requestParameters.requireExecPerm !== undefined) {
            queryParameters['requireExecPerm'] = requestParameters.requireExecPerm;
        }

        if (requestParameters.select !== undefined) {
            queryParameters['select'] = requestParameters.select;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/apps/{appId}/{appVersion}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"appVersion"}}`, encodeURIComponent(String(requestParameters.appVersion))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespAppFromJSON(jsonValue));
    }

    /**
     * Retrieve information for an application given the application Id and version.
     * Retrieve details for specific version of an application
     */
    async getApp(requestParameters: GetAppRequest): Promise<RespApp> {
        const response = await this.getAppRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve latest version of an application.
     * Retrieve latest version of an application
     */
    async getAppLatestVersionRaw(requestParameters: GetAppLatestVersionRequest): Promise<runtime.ApiResponse<RespApp>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getAppLatestVersion.');
        }

        const queryParameters: any = {};

        if (requestParameters.requireExecPerm !== undefined) {
            queryParameters['requireExecPerm'] = requestParameters.requireExecPerm;
        }

        if (requestParameters.select !== undefined) {
            queryParameters['select'] = requestParameters.select;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/apps/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespAppFromJSON(jsonValue));
    }

    /**
     * Retrieve latest version of an application.
     * Retrieve latest version of an application
     */
    async getAppLatestVersion(requestParameters: GetAppLatestVersionRequest): Promise<RespApp> {
        const response = await this.getAppLatestVersionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve list of applications. Use search and select query parameters to limit results.
     * Retrieve applications
     */
    async getAppsRaw(requestParameters: GetAppsRequest): Promise<runtime.ApiResponse<RespApps>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.startAfter !== undefined) {
            queryParameters['startAfter'] = requestParameters.startAfter;
        }

        if (requestParameters.computeTotal !== undefined) {
            queryParameters['computeTotal'] = requestParameters.computeTotal;
        }

        if (requestParameters.select !== undefined) {
            queryParameters['select'] = requestParameters.select;
        }

        if (requestParameters.showDeleted !== undefined) {
            queryParameters['showDeleted'] = requestParameters.showDeleted;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/apps`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespAppsFromJSON(jsonValue));
    }

    /**
     * Retrieve list of applications. Use search and select query parameters to limit results.
     * Retrieve applications
     */
    async getApps(requestParameters: GetAppsRequest): Promise<RespApps> {
        const response = await this.getAppsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check if an application is currently enabled, i.e. available for use.
     * Check if application is currently enabled
     */
    async isEnabledRaw(requestParameters: IsEnabledRequest): Promise<runtime.ApiResponse<RespBoolean>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling isEnabled.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/apps/{appId}/isEnabled`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespBooleanFromJSON(jsonValue));
    }

    /**
     * Check if an application is currently enabled, i.e. available for use.
     * Check if application is currently enabled
     */
    async isEnabled(requestParameters: IsEnabledRequest): Promise<RespBoolean> {
        const response = await this.isEnabledRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve details for applications. Use query parameters to specify search conditions. For example ?owner.eq=jdoe&enabled.eq=false
     * Retrieve list of applications matching search conditions specified as query parameters
     */
    async searchAppsQueryParametersRaw(requestParameters: SearchAppsQueryParametersRequest): Promise<runtime.ApiResponse<RespApps>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.startAfter !== undefined) {
            queryParameters['startAfter'] = requestParameters.startAfter;
        }

        if (requestParameters.computeTotal !== undefined) {
            queryParameters['computeTotal'] = requestParameters.computeTotal;
        }

        if (requestParameters.select !== undefined) {
            queryParameters['select'] = requestParameters.select;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/apps/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespAppsFromJSON(jsonValue));
    }

    /**
     * Retrieve details for applications. Use query parameters to specify search conditions. For example ?owner.eq=jdoe&enabled.eq=false
     * Retrieve list of applications matching search conditions specified as query parameters
     */
    async searchAppsQueryParameters(requestParameters: SearchAppsQueryParametersRequest): Promise<RespApps> {
        const response = await this.searchAppsQueryParametersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve details for applications. Use request body to specify SQL-like search conditions.
     * Retrieve applications matching search conditions
     */
    async searchAppsRequestBodyRaw(requestParameters: SearchAppsRequestBodyRequest): Promise<runtime.ApiResponse<RespApps>> {
        if (requestParameters.reqSearchApps === null || requestParameters.reqSearchApps === undefined) {
            throw new runtime.RequiredError('reqSearchApps','Required parameter requestParameters.reqSearchApps was null or undefined when calling searchAppsRequestBody.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.startAfter !== undefined) {
            queryParameters['startAfter'] = requestParameters.startAfter;
        }

        if (requestParameters.computeTotal !== undefined) {
            queryParameters['computeTotal'] = requestParameters.computeTotal;
        }

        if (requestParameters.select !== undefined) {
            queryParameters['select'] = requestParameters.select;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/apps/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqSearchAppsToJSON(requestParameters.reqSearchApps),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespAppsFromJSON(jsonValue));
    }

    /**
     * Retrieve details for applications. Use request body to specify SQL-like search conditions.
     * Retrieve applications matching search conditions
     */
    async searchAppsRequestBody(requestParameters: SearchAppsRequestBodyRequest): Promise<RespApps> {
        const response = await this.searchAppsRequestBodyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Mark an application as not deleted. Application will appear in queries.
     * Mark an application as not deleted
     */
    async undeleteAppRaw(requestParameters: UndeleteAppRequest): Promise<runtime.ApiResponse<RespChangeCount>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling undeleteApp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/apps/{appId}/undelete`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespChangeCountFromJSON(jsonValue));
    }

    /**
     * Mark an application as not deleted. Application will appear in queries.
     * Mark an application as not deleted
     */
    async undeleteApp(requestParameters: UndeleteAppRequest): Promise<RespChangeCount> {
        const response = await this.undeleteAppRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update existing version of an application. Request body may only contain updatable attributes.  Attributes that may not be updated via PATCH are    - id   - appType   - owner   - enabled 
     * Update attributes for an existing version
     */
    async updateAppRaw(requestParameters: UpdateAppRequest): Promise<runtime.ApiResponse<RespResourceUrl>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling updateApp.');
        }

        if (requestParameters.appVersion === null || requestParameters.appVersion === undefined) {
            throw new runtime.RequiredError('appVersion','Required parameter requestParameters.appVersion was null or undefined when calling updateApp.');
        }

        if (requestParameters.reqUpdateApp === null || requestParameters.reqUpdateApp === undefined) {
            throw new runtime.RequiredError('reqUpdateApp','Required parameter requestParameters.reqUpdateApp was null or undefined when calling updateApp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/apps/{appId}/{appVersion}`.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"appVersion"}}`, encodeURIComponent(String(requestParameters.appVersion))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ReqUpdateAppToJSON(requestParameters.reqUpdateApp),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespResourceUrlFromJSON(jsonValue));
    }

    /**
     * Update existing version of an application. Request body may only contain updatable attributes.  Attributes that may not be updated via PATCH are    - id   - appType   - owner   - enabled 
     * Update attributes for an existing version
     */
    async updateApp(requestParameters: UpdateAppRequest): Promise<RespResourceUrl> {
        const response = await this.updateAppRaw(requestParameters);
        return await response.value();
    }

}
