/* tslint:disable */
/* eslint-disable */
/**
 * Authenticator
 * REST API and web server providing authentication for a Tapis v3 instance.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BasicResponse,
    BasicResponseFromJSON,
    BasicResponseToJSON,
} from '../models';

/**
 * 
 */
export class HealthCheckApi extends runtime.BaseAPI {

    /**
     * Logged connectivity test. No authorization required.
     */
    async helloRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<BasicResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/oauth2/hello`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicResponseFromJSON(jsonValue));
    }

    /**
     * Logged connectivity test. No authorization required.
     */
    async hello(initOverrides?: RequestInit): Promise<BasicResponse> {
        const response = await this.helloRaw(initOverrides);
        return await response.value();
    }

    /**
     * Logged connectivity test. No authorization required.
     */
    async readyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<BasicResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3/oauth2/ready`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicResponseFromJSON(jsonValue));
    }

    /**
     * Logged connectivity test. No authorization required.
     */
    async ready(initOverrides?: RequestInit): Promise<BasicResponse> {
        const response = await this.readyRaw(initOverrides);
        return await response.value();
    }

}
