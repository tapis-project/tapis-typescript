/* tslint:disable */
/* eslint-disable */
/**
 * Authenticator
 * REST API and web server providing authentication for a Tapis v3 instance.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    NewTenantConfig,
    NewTenantConfigFromJSON,
    NewTenantConfigToJSON,
    RespGetConfig,
    RespGetConfigFromJSON,
    RespGetConfigToJSON,
    RespUpdateConfig,
    RespUpdateConfigFromJSON,
    RespUpdateConfigToJSON,
} from '../models';

export interface UpdateConfigRequest {
    newTenantConfig: NewTenantConfig;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * Get the authenticator configuraion for the tenant; restricted to Tenant admins.
     */
    async getConfigRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespGetConfig>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/oauth2/admin/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespGetConfigFromJSON(jsonValue));
    }

    /**
     * Get the authenticator configuraion for the tenant; restricted to Tenant admins.
     */
    async getConfig(initOverrides?: RequestInit): Promise<RespGetConfig> {
        const response = await this.getConfigRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update the authenticator configuraion for the tenant; restricted to Tenant admins.
     */
    async updateConfigRaw(requestParameters: UpdateConfigRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespUpdateConfig>> {
        if (requestParameters.newTenantConfig === null || requestParameters.newTenantConfig === undefined) {
            throw new runtime.RequiredError('newTenantConfig','Required parameter requestParameters.newTenantConfig was null or undefined when calling updateConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/oauth2/admin/config`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NewTenantConfigToJSON(requestParameters.newTenantConfig),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespUpdateConfigFromJSON(jsonValue));
    }

    /**
     * Update the authenticator configuraion for the tenant; restricted to Tenant admins.
     */
    async updateConfig(requestParameters: UpdateConfigRequest, initOverrides?: RequestInit): Promise<RespUpdateConfig> {
        const response = await this.updateConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
