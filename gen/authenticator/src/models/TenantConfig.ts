/* tslint:disable */
/* eslint-disable */
/**
 * Authenticator
 * REST API and web server providing authentication for a Tapis v3 instance.
 *
 * The version of the OpenAPI document: 1
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TenantConfig
 */
export interface TenantConfig {
    /**
     * JSON-serializable list of allowable grant types
     * @type {Array<string>}
     * @memberof TenantConfig
     */
    allowable_grant_types?: Array<string>;
    /**
     * whether to use the LDAP configured in the Tenants API for this tenant.
     * @type {boolean}
     * @memberof TenantConfig
     */
    use_ldap?: boolean;
    /**
     * whether to make the Authenticator token web app available
     * @type {boolean}
     * @memberof TenantConfig
     */
    use_token_webapp?: boolean;
    /**
     * JSON-serializable object which includes various details such as which MFA system to use (e.g., TACC MFA or another MFA) and configurations for it.
     * @type {object}
     * @memberof TenantConfig
     */
    mfa_config?: object;
    /**
     * The access token TTL, in seconds, for standard grant types, such as authorization code.
     * @type {number}
     * @memberof TenantConfig
     */
    default_access_token_ttl?: number;
    /**
     * The refresh token TTL, in seconds, for standard grant types, such as authorization code.
     * @type {number}
     * @memberof TenantConfig
     */
    default_refresh_token_ttl?: number;
    /**
     * The maxiumum access token TTL, in seconds, for grant types that allow the caller to specify the TTL.
     * @type {number}
     * @memberof TenantConfig
     */
    max_access_token_ttl?: number;
    /**
     * The maxiumum refresh token TTL, in seconds, for grant types that allow the caller to specify the TTL.
     * @type {number}
     * @memberof TenantConfig
     */
    max_refresh_token_ttl?: number;
    /**
     * JSON-serializable object which includes various configuration details for tenants using an IdP that is not LDAP/AD.
     * @type {object}
     * @memberof TenantConfig
     */
    custom_idp_configuration?: object;
    /**
     * Token URL endpoint for generating v2 token
     * @type {string}
     * @memberof TenantConfig
     */
    token_url?: string;
    /**
     * Client ID for impersonation
     * @type {string}
     * @memberof TenantConfig
     */
    impers_oauth_client_id?: string;
    /**
     * Client secret for impersonation
     * @type {string}
     * @memberof TenantConfig
     */
    impers_oauth_client_secret?: string;
    /**
     * Impersonation username for impersonation
     * @type {string}
     * @memberof TenantConfig
     */
    impersadmin_username?: string;
    /**
     * Impersonation password for impersonation
     * @type {string}
     * @memberof TenantConfig
     */
    impersadmin_password?: string;
}

export function TenantConfigFromJSON(json: any): TenantConfig {
    return TenantConfigFromJSONTyped(json, false);
}

export function TenantConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): TenantConfig {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allowable_grant_types': !exists(json, 'allowable_grant_types') ? undefined : json['allowable_grant_types'],
        'use_ldap': !exists(json, 'use_ldap') ? undefined : json['use_ldap'],
        'use_token_webapp': !exists(json, 'use_token_webapp') ? undefined : json['use_token_webapp'],
        'mfa_config': !exists(json, 'mfa_config') ? undefined : json['mfa_config'],
        'default_access_token_ttl': !exists(json, 'default_access_token_ttl') ? undefined : json['default_access_token_ttl'],
        'default_refresh_token_ttl': !exists(json, 'default_refresh_token_ttl') ? undefined : json['default_refresh_token_ttl'],
        'max_access_token_ttl': !exists(json, 'max_access_token_ttl') ? undefined : json['max_access_token_ttl'],
        'max_refresh_token_ttl': !exists(json, 'max_refresh_token_ttl') ? undefined : json['max_refresh_token_ttl'],
        'custom_idp_configuration': !exists(json, 'custom_idp_configuration') ? undefined : json['custom_idp_configuration'],
        'token_url': !exists(json, 'token_url') ? undefined : json['token_url'],
        'impers_oauth_client_id': !exists(json, 'impers_oauth_client_id') ? undefined : json['impers_oauth_client_id'],
        'impers_oauth_client_secret': !exists(json, 'impers_oauth_client_secret') ? undefined : json['impers_oauth_client_secret'],
        'impersadmin_username': !exists(json, 'impersadmin_username') ? undefined : json['impersadmin_username'],
        'impersadmin_password': !exists(json, 'impersadmin_password') ? undefined : json['impersadmin_password'],
    };
}

export function TenantConfigToJSON(value?: TenantConfig | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allowable_grant_types': value.allowable_grant_types,
        'use_ldap': value.use_ldap,
        'use_token_webapp': value.use_token_webapp,
        'mfa_config': value.mfa_config,
        'default_access_token_ttl': value.default_access_token_ttl,
        'default_refresh_token_ttl': value.default_refresh_token_ttl,
        'max_access_token_ttl': value.max_access_token_ttl,
        'max_refresh_token_ttl': value.max_refresh_token_ttl,
        'custom_idp_configuration': value.custom_idp_configuration,
        'token_url': value.token_url,
        'impers_oauth_client_id': value.impers_oauth_client_id,
        'impers_oauth_client_secret': value.impers_oauth_client_secret,
        'impersadmin_username': value.impersadmin_username,
        'impersadmin_password': value.impersadmin_password,
    };
}

