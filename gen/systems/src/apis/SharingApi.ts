/* tslint:disable */
/* eslint-disable */
/**
 * Tapis Systems API
 * The Tapis Systems API provides for management of Tapis Systems including permissions, credentials and Scheduler Profiles.
 *
 * The version of the OpenAPI document: 1.7.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ReqShareUpdate,
    ReqShareUpdateFromJSON,
    ReqShareUpdateToJSON,
    RespBasic,
    RespBasicFromJSON,
    RespBasicToJSON,
    RespShareInfo,
    RespShareInfoFromJSON,
    RespShareInfoToJSON,
} from '../models';

export interface GetShareInfoRequest {
    systemId: string;
}

export interface ShareSystemRequest {
    systemId: string;
    reqShareUpdate: ReqShareUpdate;
}

export interface ShareSystemPublicRequest {
    systemId: string;
}

export interface UnShareSystemRequest {
    systemId: string;
    reqShareUpdate: ReqShareUpdate;
}

export interface UnShareSystemPublicRequest {
    systemId: string;
}

/**
 * 
 */
export class SharingApi extends runtime.BaseAPI {

    /**
     * Retrieve all sharing information for a system. This includes all users with whom the system has been shared and whether or not the system has been made publicly available. 
     * Retrieve all sharing information for a system
     */
    async getShareInfoRaw(requestParameters: GetShareInfoRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespShareInfo>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling getShareInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/systems/share/{systemId}`.replace(`{${"systemId"}}`, encodeURIComponent(String(requestParameters.systemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespShareInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve all sharing information for a system. This includes all users with whom the system has been shared and whether or not the system has been made publicly available. 
     * Retrieve all sharing information for a system
     */
    async getShareInfo(requestParameters: GetShareInfoRequest, initOverrides?: RequestInit): Promise<RespShareInfo> {
        const response = await this.getShareInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or update sharing information for a system. The system will be shared with the list of users provided in the request body. Sharing allows READ and EXECUTE access. When the system has a dynamic *effectiveUserId*, sharing also allows for MODIFY access to all paths for calls made through the Files service. Requester must be owner of the system. 
     * Share a system with one or more users.
     */
    async shareSystemRaw(requestParameters: ShareSystemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespBasic>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling shareSystem.');
        }

        if (requestParameters.reqShareUpdate === null || requestParameters.reqShareUpdate === undefined) {
            throw new runtime.RequiredError('reqShareUpdate','Required parameter requestParameters.reqShareUpdate was null or undefined when calling shareSystem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/systems/share/{systemId}`.replace(`{${"systemId"}}`, encodeURIComponent(String(requestParameters.systemId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqShareUpdateToJSON(requestParameters.reqShareUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespBasicFromJSON(jsonValue));
    }

    /**
     * Create or update sharing information for a system. The system will be shared with the list of users provided in the request body. Sharing allows READ and EXECUTE access. When the system has a dynamic *effectiveUserId*, sharing also allows for MODIFY access to all paths for calls made through the Files service. Requester must be owner of the system. 
     * Share a system with one or more users.
     */
    async shareSystem(requestParameters: ShareSystemRequest, initOverrides?: RequestInit): Promise<RespBasic> {
        const response = await this.shareSystemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Share a system with all users in the tenant. Sharing allows READ and EXECUTE access. When the system has a dynamic *effectiveUserId*, sharing also allows for MODIFY access to all paths for calls made through the Files service. Requester must be owner of the system. 
     * Share a system publicly with all users in the tenant.
     */
    async shareSystemPublicRaw(requestParameters: ShareSystemPublicRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespBasic>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling shareSystemPublic.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/systems/share_public/{systemId}`.replace(`{${"systemId"}}`, encodeURIComponent(String(requestParameters.systemId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespBasicFromJSON(jsonValue));
    }

    /**
     * Share a system with all users in the tenant. Sharing allows READ and EXECUTE access. When the system has a dynamic *effectiveUserId*, sharing also allows for MODIFY access to all paths for calls made through the Files service. Requester must be owner of the system. 
     * Share a system publicly with all users in the tenant.
     */
    async shareSystemPublic(requestParameters: ShareSystemPublicRequest, initOverrides?: RequestInit): Promise<RespBasic> {
        const response = await this.shareSystemPublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or update sharing information for a system. The system will be unshared with the list of users provided in the request body. Requester must be owner of the system. 
     * Unshare a system with one or more users.
     */
    async unShareSystemRaw(requestParameters: UnShareSystemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespBasic>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling unShareSystem.');
        }

        if (requestParameters.reqShareUpdate === null || requestParameters.reqShareUpdate === undefined) {
            throw new runtime.RequiredError('reqShareUpdate','Required parameter requestParameters.reqShareUpdate was null or undefined when calling unShareSystem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/systems/unshare/{systemId}`.replace(`{${"systemId"}}`, encodeURIComponent(String(requestParameters.systemId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqShareUpdateToJSON(requestParameters.reqShareUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespBasicFromJSON(jsonValue));
    }

    /**
     * Create or update sharing information for a system. The system will be unshared with the list of users provided in the request body. Requester must be owner of the system. 
     * Unshare a system with one or more users.
     */
    async unShareSystem(requestParameters: UnShareSystemRequest, initOverrides?: RequestInit): Promise<RespBasic> {
        const response = await this.unShareSystemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove public sharing for a system. Requester must be owner of the system. 
     * Remove public access for a system.
     */
    async unShareSystemPublicRaw(requestParameters: UnShareSystemPublicRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RespBasic>> {
        if (requestParameters.systemId === null || requestParameters.systemId === undefined) {
            throw new runtime.RequiredError('systemId','Required parameter requestParameters.systemId was null or undefined when calling unShareSystemPublic.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Tapis-Token"] = this.configuration.apiKey("X-Tapis-Token"); // TapisJWT authentication
        }

        const response = await this.request({
            path: `/v3/systems/unshare_public/{systemId}`.replace(`{${"systemId"}}`, encodeURIComponent(String(requestParameters.systemId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespBasicFromJSON(jsonValue));
    }

    /**
     * Remove public sharing for a system. Requester must be owner of the system. 
     * Remove public access for a system.
     */
    async unShareSystemPublic(requestParameters: UnShareSystemPublicRequest, initOverrides?: RequestInit): Promise<RespBasic> {
        const response = await this.unShareSystemPublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
